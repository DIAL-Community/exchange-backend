image: ruby:3.2.2

services:
  - postgres:latest

stages:
  - build
  - lint
  - test
  - staging

variables:
  BUNDLE_PATH: vendor/bundle
  BUNDLE_BIN: vendor/bundle/bin
  GEM_HOME: vendor/bundle
  POSTGRES_DB: registry_test
  POSTGRES_USER: registry
  POSTGRES_PASSWORD: 'Password!1'
  POSTGRES_HOST_AUTH_METHOD: trust
  DB_HOST: postgres
  DB_NAME: registry_test
  DB_USERNAME: registry
  DB_PASSWORD: 'Password!1'
  RAILS_ENV: test

cache:
  key:
    files:
      - Gemfile.lock
  paths:
    - "vendor/bundle"

build_rails:
  tags:
    - rails
  stage: build
  timeout: 30m
  script:
    - apt-get update -yy && apt-get install build-essential libpq-dev postgresql postgresql-contrib cmake -y
    - gem install bundler:2.4.10
    - bundle config set path 'vendor/bundle'
    - bundle install

lint_rails:
  tags:
    - rails
  stage: lint
  timeout: 10m
  before_script:
    - bundle config set path 'vendor/bundle'
    - bundle check || bundle install
  script:
    - bundle config set path 'vendor/bundle'
    - bundle exec rubocop --config .rubocop.yml

test_rails:
  tags:
    - rails
  stage: test
  timeout: 10m
  before_script:
    - curl -sL https://deb.nodesource.com/setup_16.x | bash -
    - apt-get update -yy && apt-get install postgresql postgresql-contrib nodejs -y
    - bundle config set path 'vendor/bundle'
    - bundle check || bundle install
    - cp config/database.yml.gitlab config/database.yml
    - until PGPASSWORD=Password!1 psql -h "postgres" -U "registry" -d "registry_test" -c '\q'; do sleep 2s; done
    - RAILS_ENV=test bundle exec rake db:drop db:create db:schema:load db:migrate
  script:
    - RAILS_ENV=test bundle exec rspec spec --format documentation

build_docker:
  image: docker:20.10.16
  stage: staging
  services:
    - docker:20.10.16-dind
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $IMAGE_TAG .
    - docker push $IMAGE_TAG

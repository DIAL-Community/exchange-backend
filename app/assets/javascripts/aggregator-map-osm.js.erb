
const compareAggregators = function(a, b) {
  if (a.name.toLowerCase() > b.name.toLowerCase()) return 1;
  if (a.name.toLowerCase() < b.name.toLowerCase()) return -1;

  return 0;
}

const loadAggregatorTiles = function () {
  let loadingIndicator = { 'country': false, 'aggregator': false, 'operator': false};
  const dimmedOpacity = 0.3;
  let operators = {};

  const aggregators = {};
  const aggregatorsByCountry = {};
  const countries = {};
  const services = {};

  const countryPopup = new ol.Overlay({
    element: document.getElementById('aggregator-country-osm')
  });

  const selectedMarkerLayer = new ol.layer.Vector({
    source: new ol.source.Vector(),
    style: new ol.style.Style({
      image: new ol.style.Icon({
        anchor: [11, 29],
        anchorXUnits: 'pixels',
        anchorYUnits: 'pixels',
        opacity: 1,
        src: "<%= asset_path('map_marker.png') %>"
      })
    }),
  });

  const aggregatorMarkerLayer = new ol.layer.Vector({
    source: new ol.source.Vector(),
    style: new ol.style.Style({
      image: new ol.style.Icon({
        anchor: [11, 29],
        anchorXUnits: 'pixels',
        anchorYUnits: 'pixels',
        opacity: 1,
        src: "<%= asset_path('map_marker.png') %>"
      })
    }),
  });

  const baseLayer = new ol.layer.Tile({
    source: new ol.source.OSM()
  });

  const map = new ol.Map({
    target: 'map-aggregator-osm',
    layers: [
      baseLayer,
      aggregatorMarkerLayer,
      selectedMarkerLayer
    ],
    overlays: [countryPopup],
    view: new ol.View({
      center: ol.proj.fromLonLat([10, 20.3]),
      zoom: 2,
      maxZoom: 10,
      minZoom: 2
    })
  });

  $('#map-aggregator-osm').data('map', map);
  $(document).trigger('#map-aggregator-osm:loaded');

  $.getJSON('/countries.json?without_paging=true', function (countryObjects) {
    countryObjects.forEach(function(country) {
      countries[country.name] = {
        country_code: country.code,
        latitude: country.latitude,
        longitude: country.longitude,
        country_name: country.name
      }
    });
    $(document).trigger({ type: 'data#loaded', sourceType: 'country' });
  });

  $.getJSON('/operator_services.json?without_paging=true', function(data) {
    operators = data.operators;
    for(operatorName in operators) {
      const option = new Option(operatorName, operatorName);
      $(option).html(operatorName);
      $('#operators').append(option);
    };
    $(document).trigger({ type: 'data#loaded', sourceType: 'operator' });
  });

  $.getJSON('/organizations.json?without_paging=true&mni_only=true', function(organizations) {
    organizations
      .filter(function(organization) { return organization.is_mni; })
      .forEach(function(organization) {
        const normalized = {
          id: organization.id,
          name: organization.name,
          slug: organization.slug,
          capabilities: organization.capabilities,
          operators: []
        }

        organization.capabilities.forEach(function(capability) {
          // create the object to be used to generate the select box.
          services[capability.service] = capability.service;
          // create convenient list of operators for the aggregator.
          if (normalized.operators.indexOf(capability.operator) === -1) {
            normalized.operators.push(capability.operator)
          }
        });

        aggregators[normalized.id] = normalized;
        organization.countries.forEach(function(country_name) {
          const countries = aggregatorsByCountry[country_name] || []
          countries.push(normalized.id);
          aggregatorsByCountry[country_name] = countries;
        });
      });

    Object.values(aggregators).sort(compareAggregators).forEach(function(aggregator) {
      const option = new Option(aggregator.name, aggregator.id);
      $(option).html(aggregator.name);
      $('#aggregators').append(option);
    });

      // Prepare the service filter.
    Object.keys(services).sort().forEach(function(service) {
      const option = new Option(service, service);
      $(option).html(service);
      $('#services').append(option);
    });
    $(document).trigger({ type: 'data#loaded', sourceType: 'aggregator' });
  });

  $(document).on('data#loaded', function(data) {
    loadingIndicator[data.sourceType] = true;
    if (loadingIndicator['country'] && loadingIndicator['aggregator'] && loadingIndicator['operator']) {
      // Hightlight our initial country list.
      prepareCountryLayer(aggregatorsByCountry, countries, aggregatorMarkerLayer);
      $("#loading-spinner").hide();
      loadingIndicator = {}
    }
  });

  // Build list of country features for an aggregator
  const prepareCountryLayer = function(aggregatorsByCountry, countries, aggregatorMarkerLayer) {
    aggregatorMarkerLayer.getSource().clear();
    Object.keys(aggregatorsByCountry).forEach(function(aggregatorCountry) {
      const country = countries[aggregatorCountry];
      if (!country) {
        return;
      }

      const coordinate = [parseFloat(country.longitude), parseFloat(country.latitude)];
      const markerCoordinate = ol.proj.transform(coordinate, 'EPSG:4326', 'EPSG:3857');
      
      aggregatorMarkerLayer.getSource().addFeature(new ol.Feature({
        name: aggregatorCountry,
        geometry: new ol.geom.Point(markerCoordinate),
        aggregators: aggregatorsByCountry[aggregatorCountry]
      }));
    });
  }

  const isMarkerLayer = function (feature, layer) {
    if (layer === aggregatorMarkerLayer) {
      return feature;
    } else if (layer === selectedMarkerLayer) {
      selectedMarkerLayer.getSource().removeFeature(feature)
      aggregatorMarkerLayer.getSource().addFeature(feature);
      return feature;
    } 
  }

  // Build popup content for a single aggregator marker feature
  const buildPopupContent = function(organization) {
    return `<div class="card p-0">
              <div class="card-header py-2 px-2">${organization.name}</div>
              <p class="small py-2 px-2 mb-0">
                <a href="/organizations/${organization.slug}" target="_blank" rel="noreferrer noopener">
                  <small>View aggregator</small>
                </a>
                <br />
              </p>
            </div>`
  }

  // Build popup content for an aggregator where the feature contains
  // multiple aggregator. The default is to collapse all (display: none).
  const buildMultiPopupContent = function(organization) {
    return `<p class="org-details mb-0" style="display:none">
              <small>
                <a href="/organizations/${organization.slug}" target="_blank" rel="noreferrer noopener">
                  View aggregator
                </a>
                <br />
              </small>
            </p>`
  }

  const clearSelection = function() {
    // Set the opacity back to original value
    aggregatorMarkerLayer.setOpacity(1);
    // Move back selected feature to the aggregator layer
    selectedMarkerLayer.getSource().forEachFeature(function(feature) {
      aggregatorMarkerLayer.getSource().addFeature(feature);
    });
    // Clear the selected aggregator layer
    selectedMarkerLayer.getSource().clear();
  }

  const clickHandler = function (event) {
    const element = $('#aggregator-osm-info');
    const aggregatorFeature = map.forEachFeatureAtPixel(event.pixel, isMarkerLayer);
    if (aggregatorFeature) {
      // Move the selected feature from the aggregator layer to selected aggregator layer.
      // We will dim the org layer by lowering down the opacity later on.
      aggregatorMarkerLayer.getSource().removeFeature(aggregatorFeature)
      selectedMarkerLayer.getSource().addFeature(aggregatorFeature);
      aggregatorMarkerLayer.setOpacity(dimmedOpacity);

      const aggregatorIds = aggregatorFeature.get("aggregators");
      if (aggregatorIds.length == 1) {
        const aggregator = aggregators[aggregatorIds[0]];
        const content = buildPopupContent(aggregator);
        $(element).html(content);
        $(element).show();
      } else {
        const contentDiv = $('<div class="card p-0" style="overflow: hidden; max-height: 10rem"/>');

        const contentHeader = $(`<div class="card-header py-2 px-2">${aggregatorIds.length} Aggregator(s)</div>`);
        contentDiv.append(contentHeader);

        const aggregatorElements = $('<div class="list-group" style="overflow-y: auto;" />');
        contentDiv.append(aggregatorElements);

        aggregatorIds.forEach(function (aggregatorId) {
          const aggregator = aggregators[aggregatorId];
          const aggregatorInfo = $('<div class="list-group-item list-group-item-action py-2 px-2" />');

          aggregatorInfo.click(function() {
            $(this).parents(".list-group").find('.org-details').hide();
            $(this).find('.org-details').show();
          });

          aggregatorInfo.append(`<strong>${aggregator.name}</strong>`);
          aggregatorInfo.append(buildMultiPopupContent(aggregator))
          aggregatorElements.append(aggregatorInfo);
        });
        $(element).html(contentDiv);
        $(element).show();
      }
    } else {
      clearSelection();
      $(element).hide();
    }
  }

  const isCountryLayer = function(feature, layer) {
    if (layer === aggregatorMarkerLayer || layer === selectedMarkerLayer) {
      return feature;
    }
  }

  const pointerMoveHandler = function(event) {
    const feature = map.forEachFeatureAtPixel(event.pixel, isCountryLayer);
    if (feature) {
      const element = countryPopup.element;
      const name = feature.get('name');
      const aggregatorIds = feature.get("aggregators");
      $(element).html(
        `<div class="card map-hover p-0" style="z-index: 10;">
          <div class="card-header py-2 px-2">${name}</div>
          <p class="text-muted py-2 px-2 mb-0">
            ${aggregatorIds.length} aggregator(s).
            <br />
            <small>Click to view aggregator(s).</small>
          </p>
        </div>`);
      countryPopup.setPosition(event.coordinate);
    } else {
      countryPopup.setPosition(undefined);
    }
  }

  const highlightHolder = {
    aggregators: [],
    operators: [],
    services: []
  }

  $('#aggregators').change(function() {
    const filterAggregatorId = $(this).val();
    $('#aggregator-osm-info').hide();
    clearSelection();
    
    // Remove partial features.
    aggregatorMarkerLayer.getSource().forEachFeature(function(feature) {
      if (feature.get("partialAggregators") === true) {
        aggregatorMarkerLayer.getSource().removeFeature(feature);
      }
    })
    // Add back all features from temporary holder. 
    highlightHolder.aggregators.forEach(function(feature) {
      aggregatorMarkerLayer.getSource().addFeature(feature);
    });
    // Reset the holder.
    highlightHolder.aggregators.length = 0;
    aggregatorMarkerLayer.getSource().forEachFeature(function(feature) {
      if (parseInt(filterAggregatorId) === -1) {
        return;
      }
      const filteredAggregators = feature.get("aggregators").filter(function(aggregatorId) {
        return filterAggregatorId == aggregatorId;
      });
      aggregatorMarkerLayer.getSource().removeFeature(feature);
      highlightHolder.aggregators.push(feature);
      if (filteredAggregators.length > 0) {
        aggregatorMarkerLayer.getSource().addFeature(new ol.Feature({
          name: feature.get("name"),
          geometry: feature.get("geometry"),
          aggregators: filteredAggregators,
          partialAggregators: true
        }));
      }
    });
  });

  $('#operators').change(function() {
    const operatorName = $(this).val();
    $('#aggregator-osm-info').hide();
    clearSelection();

    // Remove partial features.
    aggregatorMarkerLayer.getSource().forEachFeature(function(feature) {
      if (feature.get("partialOperators") === true) {
        aggregatorMarkerLayer.getSource().removeFeature(feature);
      }
    })
    // Add back all features from temporary holder. 
    highlightHolder.operators.forEach(function(feature) {
      aggregatorMarkerLayer.getSource().addFeature(feature);
    });
    // Reset the holder.
    highlightHolder.operators.length = 0;
    const operatorByName = operators[operatorName];
    let operatorLocations = [];
    if (operatorByName) {
      operatorLocations = Object.values(operatorByName);
    }
    aggregatorMarkerLayer.getSource().forEachFeature(function(feature) {
      if (parseInt(operatorName) === -1) {
        return;
      }
      aggregatorMarkerLayer.getSource().removeFeature(feature);
      highlightHolder.operators.push(feature);
      if (operatorLocations.indexOf(feature.get('name')) !== -1) {
        const filteredAggregators = feature.get("aggregators").filter(function(aggregatorId) {
          const normalized = aggregators[aggregatorId];
          const intersect = Object.keys(operators).filter(function(operator) {
            return normalized.operators.indexOf(parseInt(operator)) !== -1;
          });
          return intersect.length > 0;
        });
        if (filteredAggregators.length > 0) {
          aggregatorMarkerLayer.getSource().addFeature(new ol.Feature({
            name: feature.get("name"),
            geometry: feature.get("geometry"),
            aggregators: filteredAggregators,
            partialOperators: true
          }));
        }
      }
    });
  });

  $('#services').change(function() {
    const serviceName = $(this).val();
    $('#aggregator-osm-info').hide();
    clearSelection();

    // Remove partial features.
    aggregatorMarkerLayer.getSource().forEachFeature(function(feature) {
      if (feature.get("partialServices") === true) {
        aggregatorMarkerLayer.getSource().removeFeature(feature);
      }
    })
    // Add back all features from temporary holder. 
    highlightHolder.services.forEach(function(feature) {
      aggregatorMarkerLayer.getSource().addFeature(feature);
    });
    // Reset the holder.
    highlightHolder.services.length = 0;
    aggregatorMarkerLayer.getSource().forEachFeature(function(feature) {
      if (parseInt(serviceName) === -1) {
        return;
      }
      aggregatorMarkerLayer.getSource().removeFeature(feature);
      highlightHolder.services.push(feature);
      const operatorName = $('#operators').val();
      const operatorByName = operators[operatorName];
      const filteredAggregators = feature.get("aggregators").filter(function(aggregatorId) {
        const normalized = aggregators[aggregatorId];
        const matchingCapabilities = normalized.capabilities.filter(function(capability) {
          // Skip:
          // * not matching feature's name and country's name.
          // * not matching service and filtered service name.
          if (capability.country !== feature.get("name") || capability.service !== serviceName) {
            return false;
          }
          return parseInt(operatorName) === -1 || Object.keys(operatorByName).indexOf(`${capabilitiy.operator}`) !== -1
        });
        return matchingCapabilities.length > 0;
      });
      if (filteredAggregators.length > 0) {
        aggregatorMarkerLayer.getSource().addFeature(new ol.Feature({
          name: feature.get("name"),
          geometry: feature.get("geometry"),
          aggregators: filteredAggregators,
          partialServices: true
        }));
      }
    });
  });

  map.on('click', clickHandler);
  map.on('pointermove', pointerMoveHandler);
}

const aggregatorOsmMapLoadedHandler = function() {
    const positionGranted = function(position) {
      if (position.coords) {
        console.log('Readjusting map center and zoom ...');
        const latitude = position.coords.latitude;
        const longitude = position.coords.longitude;
        const geoCoordinate = ol.proj.transform([parseFloat(longitude), parseFloat(latitude)], 'EPSG:4326', 'EPSG:3857');
        // Center the map to the coordinate

        aggregatorMap = $('#map-aggregator-osm').data('map');
        aggregatorMap.getView().setCenter(geoCoordinate);
        aggregatorMap.getView().setZoom(6);
      }
    }
    <% if !Setting.find_by(slug: 'default_map_center_position', value: 'country').nil? %>
      requestGeoPosition(positionGranted);
    <% end %>
  }

$(document).on('organizations#map_aggregators_osm:loaded', loadAggregatorTiles);

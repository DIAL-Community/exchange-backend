type BuildingBlock {
  buildingBlockDescriptions: [BuildingBlockDescription!]
  discourseId: Int
  id: ID!
  imageFile: String
  maturity: String
  name: String!
  products: [Product!]
  slug: String!
  workflows: [Workflow!]
}

"""
The connection type for BuildingBlock.
"""
type BuildingBlockConnection {
  """
  A list of edges.
  """
  edges: [BuildingBlockEdge]

  """
  A list of nodes.
  """
  nodes: [BuildingBlock]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

type BuildingBlockDescription {
  buildingBlockId: Int
  description: String!
  id: ID!
  locale: String!
}

"""
An edge in a connection.
"""
type BuildingBlockEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BuildingBlock
}

type CandidateOrganization {
  description: String
  id: ID!
  name: String
  rejected: Boolean
  slug: String!
  website: String
}

"""
The connection type for CandidateOrganization.
"""
type CandidateOrganizationConnection {
  """
  A list of edges.
  """
  edges: [CandidateOrganizationEdge]

  """
  A list of nodes.
  """
  nodes: [CandidateOrganization]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CandidateOrganizationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CandidateOrganization
}

type CandidateProduct {
  description: String
  id: ID!
  name: String
  rejected: Boolean
  repository: String
  slug: String!
  submitterEmail: String
  website: String
}

"""
The connection type for CandidateProduct.
"""
type CandidateProductConnection {
  """
  A list of edges.
  """
  edges: [CandidateProductEdge]

  """
  A list of nodes.
  """
  nodes: [CandidateProduct]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CandidateProductEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CandidateProduct
}

type CandidateRole {
  id: ID!
  organizationId: String
  productId: String
}

type Capability {
  aggregatorId: Int!
  capability: String!
  countryId: Int
  id: ID!
  operatorServiceId: Int!
  service: String!
}

type Count {
  buildingBlockCount: Int!
  mapCount: Int!
  orgCount: Int!
  productCount: Int!
  projectCount: Int!
  sdgCount: Int!
  useCaseCount: Int!
  workflowCount: Int!
}

type Country {
  aliases: [String!]!
  code: String!
  codeLonger: String!
  id: ID!
  latitude: String!
  longitude: String!
  name: String!
  slug: String!
}

"""
The connection type for Country.
"""
type CountryConnection {
  """
  A list of edges.
  """
  edges: [CountryEdge]

  """
  A list of nodes.
  """
  nodes: [Country]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CountryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Country
}

"""
Autogenerated return type of CreateCandidateOrganization
"""
type CreateCandidateOrganizationPayload {
  slug: String
}

"""
Autogenerated return type of CreateCandidateProduct
"""
type CreateCandidateProductPayload {
  slug: String
}

type DigitalPrinciple {
  name: String!
  phase: String!
  slug: String!
  url: String!
}

type Endorser {
  id: ID!
  name: String!
  slug: String!
}

type ExportedPdf {
  data: String!
  filename: String!
  locale: String!
}

type Handbook {
  createdAt: ISO8601DateTime!
  handbookDescriptions: [HandbookDescription!]
  handbookPages: [HandbookPage!]
  id: ID!
  imageFile: String
  maturity: String
  name: String!
  pdfUrl: String
  phases: JSON!
  slug: String!
  updatedAt: ISO8601DateTime!
}

type HandbookAnswer {
  action: String!
  answerText: String!
  id: ID!
  locale: String!
}

type HandbookDescription {
  audience: String!
  cover: String
  handbookId: Int
  id: ID!
  locale: String!
  outcomes: String!
  overview: String!
}

type HandbookPage {
  childPages: [HandbookPage!]
  handbookId: Int!
  handbookQuestion: HandbookQuestion
  id: ID!
  mediaUrl: String
  name: String!
  pageContents: [PageContent!]
  pageOrder: Int
  parentPageId: Int
  phase: String
  resources: JSON!
  slug: String!
}

type HandbookQuestion {
  handbookAnswers: [HandbookAnswer!]
  id: ID!
  locale: String!
  questionText: String!
}

type HandbookSearchPage {
  childPages: [HandbookSearchPage!]
  handbookId: Int!
  id: ID!
  name: String!
  parentPageId: Int
  resources: JSON!
  slug: String!
  snippet: String
}

"""
An ISO 8601-encoded date
"""
scalar ISO8601Date

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

"""
Represents untyped JSON
"""
scalar JSON

type Mutation {
  createCandidateOrganization(captcha: String!, description: String!, email: String!, name: String!, organizationName: String!, title: String!, website: String!): CreateCandidateOrganizationPayload
  createCandidateProduct(captcha: String!, description: String!, email: String!, name: String!, repository: String!, website: String!): CreateCandidateProductPayload
}

type Office {
  city: String!
  id: ID!
  latitude: String!
  longitude: String!
  name: String!
  organizationId: Int!
}

type OperatorService {
  countryId: Int
  id: ID!
  name: String!
  service: String!
}

type Organization {
  countries: [Country!]
  id: ID!
  imageFile: String!
  isEndorser: Boolean
  isMni: Boolean
  name: String!
  offices: [Office!]
  organizationDescriptions: [OrganizationDescription!]
  projects: [Project!]!
  sectorsWithLocale(locale: String): [Sector!]
  slug: String!
  website: String
  whenEndorsed: ISO8601Date
}

"""
The connection type for Organization.
"""
type OrganizationConnection {
  """
  A list of edges.
  """
  edges: [OrganizationEdge]

  """
  A list of nodes.
  """
  nodes: [Organization]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

type OrganizationDescription {
  description: String!
  id: ID!
  locale: String!
  organizationId: Int
}

"""
An edge in a connection.
"""
type OrganizationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Organization
}

type Origin {
  id: ID!
  name: String
  slug: String!
}

"""
The connection type for Origin.
"""
type OriginConnection {
  """
  A list of edges.
  """
  edges: [OriginEdge]

  """
  A list of nodes.
  """
  nodes: [Origin]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type OriginEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Origin
}

type PageContent {
  assets: String
  components: String
  css: String
  editorType: String
  handbookPageId: Int
  html: String!
  id: ID!
  locale: String!
  styles: String
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Product {
  buildingBlocks: [BuildingBlock!]
  childProducts: [Product!]
  cocomo: Int
  codeLines: Int
  currProjects(first: Int): [Project!]
  discourseId: Int
  endorsers: [Endorser!]
  id: ID!
  imageFile: String!
  includes: [Product!]
  interoperatesWith: [Product!]
  isLaunchable: Boolean
  languageData: JSON
  license: String
  maturityScore: Int
  maturityScores: JSON
  name: String!
  organizations: [Organization!]
  origins: [Origin!]
  owner: String
  productDescriptions: [ProductDescription!]
  productType: String!
  repository: String
  sectorsWithLocale(locale: String): [Sector!]
  slug: String!
  statistics: JSON
  sustainableDevelopmentGoals: [SustainableDevelopmentGoal!]
  tags: [String!]
  website: String
}

"""
The connection type for Product.
"""
type ProductConnection {
  """
  A list of edges.
  """
  edges: [ProductEdge]

  """
  A list of nodes.
  """
  nodes: [Product]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

type ProductDescription {
  description: String!
  id: ID!
  locale: String!
  productId: Int
}

"""
An edge in a connection.
"""
type ProductEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Product
}

type Project {
  countries: [Country!]
  id: ID!
  name: String!
  organizations: [Organization!]
  origin: Origin
  products: [Product!]
  projectDescriptions: [ProjectDescription!]
  sectorsWithLocale(locale: String): [Sector!]
  slug: String!
  tags: JSON
}

"""
The connection type for Project.
"""
type ProjectConnection {
  """
  A list of edges.
  """
  edges: [ProjectEdge]

  """
  A list of nodes.
  """
  nodes: [Project]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

type ProjectDescription {
  description: String!
  id: ID!
  locale: String!
  projectId: Int
}

"""
An edge in a connection.
"""
type ProjectEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Project
}

type Query {
  buildingBlock(slug: String!): BuildingBlock!
  buildingBlocks(search: String = ""): [BuildingBlock!]!
  candidateOrganization(slug: String!): CandidateOrganization!
  candidateOrganizations(search: String = ""): [CandidateOrganization!]!
  candidateProduct(slug: String!): CandidateProduct!
  candidateProducts(search: String = ""): [CandidateProduct!]!
  candidateRole(email: String!, organizationId: String!, productId: String!): CandidateRole!
  candidateRoles(organizationId: String!, productId: String!): [CandidateRole!]!
  capabilities(aggregatorIds: [Int!] = [], capabilities: [String!] = [], countryIds: [Int!] = [], search: String = "", services: [String!] = []): [Capability!]!
  capabilityOnly(search: String = ""): [Capability!]!
  countries(search: String = ""): [Country!]!
  counts: Count!
  endorsers(search: String = ""): [Product!]!
  exportPageContents(locale: String = "en", pageIds: [Int!]!): ExportedPdf!
  handbook(slug: String!): Handbook!
  handbooks: [Handbook!]!
  me: User!
  operatorServiceOnly(search: String = ""): [OperatorService!]!
  operatorServices(operatorIds: [Int!] = [], operators: [String!] = [], search: String = ""): [OperatorService!]!
  organization(slug: String!): Organization!
  organizations(aggregatorOnly: Boolean = false, search: String = ""): [Organization!]!
  origins(search: String!): [Origin!]!
  pageContents(handbookPageId: ID!, locale: String = "en"): PageContent!
  product(slug: String!): Product!
  products(search: String = ""): [Product!]!
  project(slug: String!): Project!
  projects(search: String = ""): [Project!]!
  sdg(slug: String!): SustainableDevelopmentGoal!
  sdgs(search: String = ""): [SustainableDevelopmentGoal!]!
  searchBuildingBlocks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sdgs: [String!] = []
    search: String = ""
    showMature: Boolean = false
    useCases: [String!] = []
    workflows: [String!] = []
  ): BuildingBlockConnection!
  searchCandidateOrganizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    search: String!
  ): CandidateOrganizationConnection!
  searchCandidateProducts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    search: String!
  ): CandidateProductConnection!
  searchCountries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    search: String = ""
  ): CountryConnection!
  searchHandbook(search: String!, slug: String!): [HandbookSearchPage!]!
  searchOrganizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String
    aggregatorOnly: Boolean = false
    aggregators: [String!] = []

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    countries: [String!] = []
    endorserOnly: Boolean = false

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    locale: String = "en"
    search: String = ""
    sectors: [String!] = []
    years: [Int!] = []
  ): OrganizationConnection!
  searchOrigins(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    search: String!
  ): OriginConnection!
  searchProducts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    buildingBlocks: [String!] = []
    countries: [String!] = []
    endorsers: [String!] = []

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    organizations: [String!] = []
    origins: [String!] = []
    productDeployable: Boolean = false
    productTypes: [String!] = []
    sdgs: [String!] = []
    search: String = ""
    sectors: [String!] = []
    tags: [String!] = []
    useCases: [String!] = []
    withMaturity: Boolean = false
    workflows: [String!] = []
  ): ProductConnection!
  searchProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    countries: [String!] = []

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    organizations: [String!] = []
    origins: [String!] = []
    products: [String!] = []
    sdgs: [String!] = []
    search: String = ""
    sectors: [String!] = []
    tags: [String!] = []
  ): ProjectConnection!
  searchSdgs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sdgs: [String!] = []
    search: String = ""
  ): SustainableDevelopmentGoalConnection!
  searchSectors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    locale: String = "en"
    search: String = ""
  ): SectorConnection!
  searchUseCases(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sdgs: [String!] = []
    search: String = ""
    showBeta: Boolean = false
  ): UseCaseConnection!
  searchWorkflows(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sdgs: [String!] = []
    search: String = ""
    useCases: [String!] = []
  ): WorkflowConnection!
  sectors(locale: String = "en", search: String = ""): [Sector!]!
  sectorsWithSubs(locale: String = "en"): [Sector!]!
  tags(search: String = ""): [Tag!]!
  useCase(slug: String!): UseCase!
  useCaseStep(slug: String!): UseCaseStep!
  useCaseSteps(slug: String!): [UseCaseStep!]!
  useCases(mature: Boolean = false, search: String = ""): [UseCase!]!
  wizard(buildingBlocks: [String!], country: String, mobileServices: [String!], sdg: String, sector: String, subsector: String, tags: [String!]): Wizard!
  workflow(slug: String!): Workflow!
  workflows(search: String = ""): [Workflow!]!
}

type Resources {
  description: String
  imageUrl: String!
  link: String!
  name: String!
  phase: String!
}

type Sector {
  id: ID!
  isDisplayable: Boolean
  locale: String
  name: String!
  originId: Int
  parentSectorId: ID
  slug: String!
  subSectors: [Sector!]
}

"""
The connection type for Sector.
"""
type SectorConnection {
  """
  A list of edges.
  """
  edges: [SectorEdge]

  """
  A list of nodes.
  """
  nodes: [Sector]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SectorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Sector
}

type SustainableDevelopmentGoal {
  id: ID!
  imageFile: String
  longTitle: String!
  name: String!
  number: Int!
  sdgTargets: [SustainableDevelopmentGoalTarget!]!
  slug: String!
}

"""
The connection type for SustainableDevelopmentGoal.
"""
type SustainableDevelopmentGoalConnection {
  """
  A list of edges.
  """
  edges: [SustainableDevelopmentGoalEdge]

  """
  A list of nodes.
  """
  nodes: [SustainableDevelopmentGoal]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SustainableDevelopmentGoalEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SustainableDevelopmentGoal
}

type SustainableDevelopmentGoalTarget {
  id: ID!
  imageFile: String
  name: String!
  sdgNumber: String!
  sustainableDevelopmentGoal: SustainableDevelopmentGoal!
  targetNumber: String!
  useCases: [UseCase!]
}

type Tag {
  id: ID!
  name: String!
  slug: String!
}

type UseCase {
  buildingBlocks: [BuildingBlock!]
  id: ID!
  imageFile: String
  maturity: String
  name: String!
  sdgTargets: [SustainableDevelopmentGoalTarget!]!
  slug: String!
  useCaseDescriptions: [UseCaseDescription!]
  useCaseHeaders: [UseCaseHeader!]
  useCaseSteps: [UseCaseStep!]
  workflows: [Workflow!]
}

"""
The connection type for UseCase.
"""
type UseCaseConnection {
  """
  A list of edges.
  """
  edges: [UseCaseEdge]

  """
  A list of nodes.
  """
  nodes: [UseCase]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

type UseCaseDescription {
  description: String!
  id: ID!
  locale: String!
  useCaseId: Int
}

"""
An edge in a connection.
"""
type UseCaseEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: UseCase
}

type UseCaseHeader {
  header: String!
  id: ID!
  locale: String!
  useCaseId: Int
}

type UseCaseStep {
  buildingBlocks: [BuildingBlock!]
  id: ID!
  name: String!
  products: [Product!]
  slug: String!
  stepNumber: Int!
  useCase: UseCase!
  useCaseStepDescriptions: [UseCaseStepDescription!]
  workflows: [Workflow!]!
}

type UseCaseStepDescription {
  description: String!
  id: ID!
  locale: String!
  useCaseId: Int
}

type User {
  confirmationSentAt: ISO8601DateTime
  confirmationToken: String
  confirmedAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
  email: String!
  encryptedPassword: String!
  expired: Boolean
  expiredAt: ISO8601DateTime
  id: ID!
  organizationId: Int
  receiveBackup: Boolean
  rememberCreatedAt: ISO8601DateTime
  resetPasswordSentAt: ISO8601DateTime
  resetPasswordToken: String
  role: String!
  savedProducts: Int
  savedProjects: Int
  savedUrls: String
  savedUseCases: Int
  unconfirmedEmail: String
  updatedAt: ISO8601DateTime!
}

type Wizard {
  buildingBlocks: [BuildingBlock!]
  digitalPrinciples: [DigitalPrinciple!]
  organizations: [Organization!]
  products: [Product!]
  projects: [Project!]
  resources: [Resources!]
  useCases: [UseCase!]
}

type Workflow {
  buildingBlocks: [BuildingBlock!]
  id: ID!
  imageFile: String!
  name: String!
  slug: String!
  useCaseSteps: [UseCaseStep!]
  workflowDescriptions: [WorkflowDescription!]
}

"""
The connection type for Workflow.
"""
type WorkflowConnection {
  """
  A list of edges.
  """
  edges: [WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

type WorkflowDescription {
  description: String!
  id: ID!
  locale: String!
  useCaseId: Int
}

"""
An edge in a connection.
"""
type WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Workflow
}
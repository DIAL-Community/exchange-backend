"""
Autogenerated return type of AddBookmark.
"""
type AddBookmarkPayload {
  bookmark: Bookmark
  errors: [String!]
}

"""
Autogenerated return type of ApplyAsContentEditor.
"""
type ApplyAsContentEditorPayload {
  candidateRole: CandidateRole
  errors: [String!]
}

"""
Autogenerated return type of ApplyAsOwner.
"""
type ApplyAsOwnerPayload {
  candidateRole: CandidateRole
  errors: [String!]
}

"""
Autogenerated return type of ApproveRejectCandidateDataset.
"""
type ApproveRejectCandidateDatasetPayload {
  candidateDataset: CandidateDataset
  errors: [String!]
}

"""
Autogenerated return type of ApproveRejectCandidateOrganization.
"""
type ApproveRejectCandidateOrganizationPayload {
  candidateOrganization: CandidateOrganization
  errors: [String!]
}

"""
Autogenerated return type of ApproveRejectCandidateProduct.
"""
type ApproveRejectCandidateProductPayload {
  candidateProduct: CandidateProduct
  errors: [String!]
}

"""
Autogenerated return type of ApproveRejectCandidateResource.
"""
type ApproveRejectCandidateResourcePayload {
  candidateResource: CandidateResource
  errors: [String!]
}

"""
Autogenerated return type of ApproveRejectCandidateRole.
"""
type ApproveRejectCandidateRolePayload {
  candidateRole: CandidateRole
  errors: [String!]
}

type Author {
  email: String
  id: ID!
  name: String!
  picture: String!
  slug: String!
}

type Bookmark {
  bookmarkedBuildingBlocks: [BuildingBlock!]
  bookmarkedProducts: [Product!]
  bookmarkedUrls: [String!]
  bookmarkedUseCases: [UseCase!]
  id: ID!
}

type BuildingBlock {
  buildingBlockDescription: BuildingBlockDescription
  buildingBlockDescriptions: [BuildingBlockDescription!]
  category: String
  govStackEntity: Boolean!
  id: ID!
  imageFile: String!
  maturity: String
  name: String!
  parsedDescription: String
  products: [Product!]
  slug: String!
  specUrl: String
  workflows: [Workflow!]
}

type BuildingBlockDescription {
  buildingBlockId: Int
  description: String!
  id: ID!
  locale: String!
}

type CandidateDataset {
  approvedBy: String
  approvedDate: ISO8601Date
  createdAt: ISO8601Date
  dataType: String!
  datasetType: String!
  description: String!
  id: ID!
  name: String!
  rejected: Boolean
  rejectedBy: String
  rejectedDate: ISO8601Date
  slug: String!
  submitterEmail: String
  visualizationUrl: String
  website: String!
}

type CandidateOrganization {
  approvedBy: String
  approvedDate: ISO8601Date
  contact: Contact
  contacts: [Contact!]!
  createStorefront: Boolean!
  createdAt: ISO8601Date
  description: String
  id: ID!
  name: String
  rejected: Boolean
  rejectedBy: String
  rejectedDate: ISO8601Date
  slug: String!
  website: String
}

type CandidateProduct {
  approvedBy: String
  approvedDate: ISO8601Date
  candidateProductCategoryIndicators: [CandidateProductCategoryIndicator!]
  candidateStatus: CandidateStatus
  commercialProduct: Boolean!
  createdAt: ISO8601Date
  createdBy: String
  description: String
  extraAttributes: [JSON!]
  id: ID!
  maturityScoreDetails: JSON
  name: String!
  notAssignedCategoryIndicators: [CategoryIndicator!]
  overallMaturityScore: Float
  rejected: Boolean
  rejectedBy: String
  rejectedDate: ISO8601Date
  repository: String!
  slug: String!
  submitterEmail: String
  website: String!
}

type CandidateProductCategoryIndicator {
  candidateProductId: ID!
  categoryIndicator: CategoryIndicator!
  categoryIndicatorId: ID!
  id: ID!
  indicatorValue: String!
}

type CandidateResource {
  approvedBy: String
  approvedDate: ISO8601Date
  countries: [Country!]!
  createdAt: ISO8601Date
  description: String!
  id: ID!
  linkDescription: String!
  name: String!
  parsedDescription: String
  publishedDate: ISO8601Date
  rejected: Boolean
  rejectedBy: String
  rejectedDate: ISO8601Date
  resourceLink: String
  resourceType: String!
  slug: String!
  submitterEmail: String
}

type CandidateRole {
  approvedBy: String
  approvedDate: ISO8601Date
  createdAt: ISO8601Date
  dataset: Dataset
  datasetId: String
  description: String
  email: String!
  id: ID!
  organization: Organization
  organizationId: String
  product: Product
  productId: String
  rejected: Boolean
  rejectedBy: String
  rejectedDate: ISO8601Date
  roles: [String!]
}

type CandidateStatus {
  description: String!
  id: ID!
  initialStatus: Boolean!
  name: String!
  nextCandidateStatuses: [CandidateStatus!]
  notificationTemplate: String!
  previousCandidateStatuses: [CandidateStatus!]
  slug: String!
  terminalStatus: Boolean!
}

type Capability {
  aggregatorId: Int!
  capability: String!
  countryId: Int
  id: ID!
  operatorServiceId: Int!
  service: String!
}

type CategoryIndicator {
  categoryIndicatorDescription: CategoryIndicatorDescription
  categoryIndicatorDescriptions: [CategoryIndicatorDescription!]
  dataSource: String
  id: ID!
  indicatorType: String
  name: String!
  rubricCategory: RubricCategory
  rubricCategoryId: Int
  scriptName: String
  slug: String!
  sourceIndicator: String
  weight: Float!
}

type CategoryIndicatorDescription {
  categoryIndicatorId: Int
  description: String!
  id: ID!
  locale: String!
}

type ChatbotConversation {
  chatbotAnswer: String!
  chatbotQuestion: String!
  chatbotReferences(first: Int): [String!]
  id: ID!
  identifier: String!
  sessionIdentifier: String!
}

type City {
  id: ID!
  latitude: String!
  longitude: String!
  name: String!
  organizations: [Organization!]!
  province: Province
  slug: String!
}

type Comment {
  author: JSON
  avatarUrl: String!
  comId: String!
  commentId: String!
  commentObjectId: Int!
  commentObjectType: String!
  fullName: String!
  id: ID!
  parentCommentId: String
  replies: [Comment!]
  text: String
  timestamp: ISO8601DateTime!
  userId: String!
}

type Contact {
  biography: String
  email: String
  extendedData: JSON
  extraAttributes: JSON
  id: ID!
  imageFile: String!
  mainContact: Boolean!
  name: String!
  organizations: [Organization!]!
  slug: String!
  socialNetworkingServices: JSON
  source: String!
  title: String
}

type Country {
  aliases: [String!]!
  code: String!
  codeLonger: String!
  description: String
  dpiProducts: [Product!]
  id: ID!
  latitude: String!
  longitude: String!
  name: String!
  organizations: [Organization!]
  products: [Product!]
  projects: [Project!]
  regions: [Region!]
  resources: [Resource!]
  slug: String!
}

"""
Autogenerated return type of CreateAdliUser.
"""
type CreateAdliUserPayload {
  errors: [String!]
  user: User
}

"""
Autogenerated return type of CreateBuildingBlock.
"""
type CreateBuildingBlockPayload {
  buildingBlock: BuildingBlock
  errors: [String!]
}

"""
Autogenerated return type of CreateCandidateDataset.
"""
type CreateCandidateDatasetPayload {
  candidateDataset: CandidateDataset
  errors: [String!]
}

"""
Autogenerated return type of CreateCandidateOrganization.
"""
type CreateCandidateOrganizationPayload {
  candidateOrganization: CandidateOrganization
  errors: [String!]
}

"""
Autogenerated return type of CreateCandidateProduct.
"""
type CreateCandidateProductPayload {
  candidateProduct: CandidateProduct
  errors: [String!]
}

"""
Autogenerated return type of CreateCandidateResource.
"""
type CreateCandidateResourcePayload {
  candidateResource: CandidateResource
  errors: [String!]
}

"""
Autogenerated return type of CreateCandidateStatus.
"""
type CreateCandidateStatusPayload {
  candidateStatus: CandidateStatus
  errors: [String!]
}

"""
Autogenerated return type of CreateCategoryIndicator.
"""
type CreateCategoryIndicatorPayload {
  categoryIndicator: CategoryIndicator
  errors: [String!]
}

"""
Autogenerated return type of CreateCategory.
"""
type CreateCategoryPayload {
  category: SoftwareCategory
  errors: [String!]
}

"""
Autogenerated return type of CreateChatbotConversation.
"""
type CreateChatbotConversationPayload {
  chatbotConversation: ChatbotConversation
  errors: [String!]
}

"""
Autogenerated return type of CreateCity.
"""
type CreateCityPayload {
  city: City
  errors: [String!]
}

"""
Autogenerated return type of CreateComment.
"""
type CreateCommentPayload {
  comment: Comment
  errors: [String!]
}

"""
Autogenerated return type of CreateContact.
"""
type CreateContactPayload {
  contact: Contact
  errors: [String!]
}

"""
Autogenerated return type of CreateCountry.
"""
type CreateCountryPayload {
  country: Country
  errors: [String!]
}

"""
Autogenerated return type of CreateDataset.
"""
type CreateDatasetPayload {
  dataset: Dataset
  errors: [String!]
}

"""
Autogenerated return type of CreateExtraAttributeDefinition.
"""
type CreateExtraAttributeDefinitionPayload {
  errors: [String!]
  extraAttributeDefinition: ExtraAttributeDefinition
}

"""
Autogenerated return type of CreateMessage.
"""
type CreateMessagePayload {
  errors: [String!]
  message: Message
}

"""
Autogenerated return type of CreateOpportunity.
"""
type CreateOpportunityPayload {
  errors: [String!]
  opportunity: Opportunity
}

"""
Autogenerated return type of CreateOrganization.
"""
type CreateOrganizationPayload {
  errors: [String!]
  organization: Organization
}

"""
Autogenerated return type of CreatePlayMove.
"""
type CreatePlayMovePayload {
  errors: [String!]!
  move: PlayMove
}

"""
Autogenerated return type of CreatePlayMoveResource.
"""
type CreatePlayMoveResourcePayload {
  errors: [String!]!
  move: PlayMove
}

"""
Autogenerated return type of CreatePlay.
"""
type CreatePlayPayload {
  errors: [String!]!
  play: Play
}

"""
Autogenerated return type of CreatePlaybook.
"""
type CreatePlaybookPayload {
  errors: [String!]
  playbook: Playbook
}

"""
Autogenerated return type of CreateProduct.
"""
type CreateProductPayload {
  errors: [String!]
  product: Product
}

"""
Autogenerated return type of CreateProductRepository.
"""
type CreateProductRepositoryPayload {
  errors: [String!]
  productRepository: ProductRepository
}

"""
Autogenerated return type of CreateProject.
"""
type CreateProjectPayload {
  errors: [String!]
  project: Project
}

"""
Autogenerated return type of CreateRegion.
"""
type CreateRegionPayload {
  errors: [String!]
  region: Region
}

"""
Autogenerated return type of CreateResource.
"""
type CreateResourcePayload {
  errors: [String!]
  resource: Resource
}

"""
Autogenerated return type of CreateResourceTopic.
"""
type CreateResourceTopicPayload {
  errors: [String!]
  resourceTopic: ResourceTopic
}

"""
Autogenerated return type of CreateRubricCategory.
"""
type CreateRubricCategoryPayload {
  errors: [String!]
  rubricCategory: RubricCategory
}

"""
Autogenerated return type of CreateSector.
"""
type CreateSectorPayload {
  errors: [String!]
  sector: Sector
}

"""
Autogenerated return type of CreateSiteSetting.
"""
type CreateSiteSettingPayload {
  errors: [String!]
  siteSetting: SiteSetting
}

"""
Autogenerated return type of CreateSpreadsheetData.
"""
type CreateSpreadsheetDataPayload {
  dialSpreadsheetData: DialSpreadsheetData
  errors: [String!]!
}

"""
Autogenerated return type of CreateStarredObject.
"""
type CreateStarredObjectPayload {
  errors: [String!]
  starredObject: StarredObject
}

"""
Autogenerated return type of CreateSync.
"""
type CreateSyncPayload {
  errors: [String!]
  sync: Sync
}

"""
Autogenerated return type of CreateTag.
"""
type CreateTagPayload {
  errors: [String!]
  tag: Tag
}

"""
Autogenerated return type of CreateTaskTracker.
"""
type CreateTaskTrackerPayload {
  errors: [String!]
  taskTracker: TaskTracker
}

"""
Autogenerated return type of CreateTenantSetting.
"""
type CreateTenantSettingPayload {
  errors: [String!]
  tenantSetting: TenantSetting
}

"""
Autogenerated return type of CreateUseCase.
"""
type CreateUseCasePayload {
  errors: [String!]
  useCase: UseCase
}

"""
Autogenerated return type of CreateUseCaseStep.
"""
type CreateUseCaseStepPayload {
  errors: [String!]
  useCaseStep: UseCaseStep
}

"""
Autogenerated return type of CreateUser.
"""
type CreateUserPayload {
  errors: [String!]
  user: User
}

"""
Autogenerated return type of CreateWizardGuidanceMail.
"""
type CreateWizardGuidanceMailPayload {
  response: String
}

"""
Autogenerated return type of CreateWorkflow.
"""
type CreateWorkflowPayload {
  errors: [String!]
  workflow: Workflow
}

type Dataset {
  aliases: JSON
  countries: [Country!]
  dataFormat: String
  datasetDescription: DatasetDescription
  datasetDescriptions: [DatasetDescription!]
  datasetType: String!
  geographicCoverage: String
  id: ID!
  imageFile: String!
  languages: String
  license: String
  manualUpdate: Boolean!
  name: String!
  organizations: [Organization!]
  origins: [Origin!]
  parsedDescription: String
  sdgs: [SustainableDevelopmentGoal!]
  sdgsMapping: String
  sectors: [Sector!]
  slug: String!
  sustainableDevelopmentGoalMapping: String
  sustainableDevelopmentGoals: [SustainableDevelopmentGoal!]
  tags: JSON
  timeRange: String
  visualizationUrl: String
  website: String
}

type DatasetDescription {
  datasetId: Int
  description: String!
  id: ID!
  locale: String!
}

"""
Autogenerated return type of DeleteBuildingBlock.
"""
type DeleteBuildingBlockPayload {
  buildingBlock: BuildingBlock
  errors: [String!]
}

"""
Autogenerated return type of DeleteCandidateStatus.
"""
type DeleteCandidateStatusPayload {
  candidateStatus: CandidateStatus
  errors: [String!]
}

"""
Autogenerated return type of DeleteCategoryIndicator.
"""
type DeleteCategoryIndicatorPayload {
  categoryIndicator: CategoryIndicator
  errors: [String!]
}

"""
Autogenerated return type of DeleteCategory.
"""
type DeleteCategoryPayload {
  category: SoftwareCategory
  errors: [String!]
}

"""
Autogenerated return type of DeleteCity.
"""
type DeleteCityPayload {
  city: City
  errors: [String!]
}

"""
Autogenerated return type of DeleteComment.
"""
type DeleteCommentPayload {
  comment: Comment
  errors: [String!]
}

"""
Autogenerated return type of DeleteContact.
"""
type DeleteContactPayload {
  contact: Contact
  errors: [String!]
}

"""
Autogenerated return type of DeleteCountry.
"""
type DeleteCountryPayload {
  country: Country
  errors: [String!]
}

"""
Autogenerated return type of DeleteDataset.
"""
type DeleteDatasetPayload {
  dataset: Dataset
  errors: [String!]
}

"""
Autogenerated return type of DeleteExtraAttributeDefinition.
"""
type DeleteExtraAttributeDefinitionPayload {
  errors: [String!]
  extraAttributeDefinition: ExtraAttributeDefinition
}

"""
Autogenerated return type of DeleteMessage.
"""
type DeleteMessagePayload {
  errors: [String!]
  message: Message
}

"""
Autogenerated return type of DeleteOpportunity.
"""
type DeleteOpportunityPayload {
  errors: [String!]
  opportunity: Opportunity
}

"""
Autogenerated return type of DeleteOrganization.
"""
type DeleteOrganizationPayload {
  errors: [String!]
  organization: Organization
}

"""
Autogenerated return type of DeletePlayMove.
"""
type DeletePlayMovePayload {
  errors: [String!]
  play: Play
}

"""
Autogenerated return type of DeletePlaybook.
"""
type DeletePlaybookPayload {
  errors: [String!]
  playbook: Playbook
}

"""
Autogenerated return type of DeletePlaybookPlay.
"""
type DeletePlaybookPlayPayload {
  errors: [String!]
  playbook: Playbook
}

"""
Autogenerated return type of DeleteProduct.
"""
type DeleteProductPayload {
  errors: [String!]
  product: Product
}

"""
Autogenerated return type of DeleteProductRepository.
"""
type DeleteProductRepositoryPayload {
  errors: [String!]
  productRepository: ProductRepository
}

"""
Autogenerated return type of DeleteProject.
"""
type DeleteProjectPayload {
  errors: [String!]
  project: Project
}

"""
Autogenerated return type of DeleteRegion.
"""
type DeleteRegionPayload {
  errors: [String!]
  region: Region
}

"""
Autogenerated return type of DeleteResource.
"""
type DeleteResourcePayload {
  errors: [String!]
  resource: Resource
}

"""
Autogenerated return type of DeleteResourceTopic.
"""
type DeleteResourceTopicPayload {
  errors: [String!]
  resourceTopic: ResourceTopic
}

"""
Autogenerated return type of DeleteRubricCategory.
"""
type DeleteRubricCategoryPayload {
  errors: [String!]
  rubricCategory: RubricCategory
}

"""
Autogenerated return type of DeleteSector.
"""
type DeleteSectorPayload {
  errors: [String!]
  sector: Sector
}

"""
Autogenerated return type of DeleteSiteSetting.
"""
type DeleteSiteSettingPayload {
  errors: [String!]
  siteSetting: SiteSetting
}

"""
Autogenerated return type of DeleteSpreadsheetData.
"""
type DeleteSpreadsheetDataPayload {
  dialSpreadsheetData: DialSpreadsheetData
  errors: [String!]!
}

"""
Autogenerated return type of DeleteSync.
"""
type DeleteSyncPayload {
  errors: [String!]
  sync: Sync
}

"""
Autogenerated return type of DeleteTag.
"""
type DeleteTagPayload {
  errors: [String!]
  tag: Tag
}

"""
Autogenerated return type of DeleteTenantSetting.
"""
type DeleteTenantSettingPayload {
  errors: [String!]
  tenantSetting: TenantSetting
}

"""
Autogenerated return type of DeleteUseCase.
"""
type DeleteUseCasePayload {
  errors: [String!]
  useCase: UseCase
}

"""
Autogenerated return type of DeleteUser.
"""
type DeleteUserPayload {
  errors: [String!]
  user: User
}

"""
Autogenerated return type of DeleteWorkflow.
"""
type DeleteWorkflowPayload {
  errors: [String!]
  workflow: Workflow
}

type DialSpreadsheetData {
  id: ID!
  slug: String!
  spreadsheetData: JSON!
  spreadsheetType: String!
}

type DigitalPrinciple {
  id: ID!
  name: String!
  phase: String!
  slug: String!
  url: String!
}

"""
Autogenerated return type of DuplicatePlay.
"""
type DuplicatePlayPayload {
  errors: [String!]!
  play: Play
}

type Endorser {
  id: ID!
  name: String!
  slug: String!
}

type ExportedPdf {
  data: String!
  filename: String!
  locale: String!
}

"""
An extra attribute for a product
"""
input ExtraAttribute {
  description: String
  index: Int
  name: String!
  title: String
  type: String
  value: JSON!
}

type ExtraAttributeDefinition {
  attributeRequired: Boolean!
  attributeType: String!
  choices: [String!]!
  description: String!
  descriptionFallback: String
  entityTypes: [String!]!
  id: ID!
  multipleChoice: Boolean!
  name: String!
  slug: String!
  title: String!
  titleFallback: String
}

type Handbook {
  createdAt: ISO8601DateTime!
  handbookDescriptions: [HandbookDescription!]
  handbookPages: [HandbookPage!]
  id: ID!
  imageFile: String!
  maturity: String
  name: String!
  pdfUrl: String
  phases: JSON!
  slug: String!
  updatedAt: ISO8601DateTime!
}

type HandbookAnswer {
  action: String!
  answerText: String!
  id: ID!
  locale: String!
}

type HandbookDescription {
  audience: String!
  cover: String
  handbookId: Int
  id: ID!
  locale: String!
  outcomes: String!
  overview: String!
}

type HandbookPage {
  childPages: [HandbookPage!]
  handbookId: Int!
  handbookQuestion: HandbookQuestion
  id: ID!
  mediaUrl: String
  name: String!
  pageContents: [PageContent!]
  pageOrder: Int
  parentPageId: Int
  phase: String
  resources: JSON!
  slug: String!
}

type HandbookQuestion {
  handbookAnswers: [HandbookAnswer!]
  id: ID!
  locale: String!
  questionText: String!
}

type HandbookSearchPage {
  childPages: [HandbookSearchPage!]
  handbookId: Int!
  id: ID!
  name: String!
  parentPageId: Int
  resources: JSON!
  slug: String!
  snippet: String
}

"""
An ISO 8601-encoded date
"""
scalar ISO8601Date @specifiedBy(url: "https://tools.ietf.org/html/rfc3339")

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime @specifiedBy(url: "https://tools.ietf.org/html/rfc3339")

"""
Represents untyped JSON
"""
scalar JSON

type Message {
  createdAt: ISO8601Date!
  createdBy: SimpleUser!
  id: ID!
  location: String
  locationType: String
  messageDatetime: ISO8601DateTime!
  messageTemplate: String!
  messageType: String!
  name: String!
  parsedMessage: String!
  slug: String!
  visible: Boolean!
}

type Mutation {
  addBookmark(data: String!, type: String!): AddBookmarkPayload
  applyAsContentEditor: ApplyAsContentEditorPayload
  applyAsOwner(entity: String!, entityId: Int!): ApplyAsOwnerPayload
  approveRejectCandidateDataset(action: String!, slug: String!): ApproveRejectCandidateDatasetPayload
  approveRejectCandidateOrganization(action: String!, slug: String!): ApproveRejectCandidateOrganizationPayload
  approveRejectCandidateProduct(action: String!, slug: String!): ApproveRejectCandidateProductPayload
  approveRejectCandidateResource(action: String!, slug: String!): ApproveRejectCandidateResourcePayload
  approveRejectCandidateRole(action: String!, candidateRoleId: ID!): ApproveRejectCandidateRolePayload
  autoSaveMove(description: String!, inlineResources: JSON = [], moveSlug: String, name: String!, owner: String!, playSlug: String!, resourceSlugs: [String!]): CreatePlayMovePayload
  autoSavePlay(buildingBlockSlugs: [String!], description: String!, draft: Boolean! = true, name: String!, owner: String!, playbookSlug: String = null, productSlugs: [String!], slug: String!, tags: [String!] = []): CreatePlayPayload
  autoSavePlaybook(audience: String = "", author: String, cover: Upload, draft: Boolean! = true, name: String!, outcomes: String = "", overview: String!, owner: String!, slug: String!, tags: [String!] = []): CreatePlaybookPayload
  createAdliUser(confirmed: Boolean, email: String!, roles: JSON = [], username: String!): CreateAdliUserPayload
  createBuildingBlock(category: String, description: String!, govStackEntity: Boolean = false, imageFile: Upload = null, maturity: String!, name: String!, slug: String!, specUrl: String = null): CreateBuildingBlockPayload
  createCandidateDataset(captcha: String!, datasetType: String!, description: String!, name: String!, slug: String!, submitterEmail: String!, visualizationUrl: String, website: String!): CreateCandidateDatasetPayload
  createCandidateOrganization(captcha: String!, createStorefront: Boolean!, description: String!, email: String!, name: String!, organizationName: String!, slug: String, title: String, website: String!): CreateCandidateOrganizationPayload
  createCandidateProduct(captcha: String!, commercialProduct: Boolean = false, description: String!, extraAttributes: [ExtraAttribute!], name: String!, repository: String, slug: String = "", submitterEmail: String!, website: String!): CreateCandidateProductPayload
  createCandidateResource(captcha: String!, countrySlugs: [String!]!, description: String!, linkDescription: String!, name: String!, publishedDate: ISO8601Date!, resourceLink: String!, resourceType: String!, slug: String!, submitterEmail: String!): CreateCandidateResourcePayload
  createCandidateStatus(description: String!, initialStatus: Boolean! = false, name: String!, nextCandidateStatusSlugs: [String!]! = [], notificationTemplate: String!, slug: String!, terminalStatus: Boolean! = false): CreateCandidateStatusPayload
  createCategory(description: String = null, name: String!, slug: String!): CreateCategoryPayload
  createCategoryIndicator(dataSource: String, description: String, indicatorType: String, name: String!, rubricCategorySlug: String, scriptName: String, slug: String!, weight: Float!): CreateCategoryIndicatorPayload
  createChatbotConversation(chatbotQuestion: String!, sessionIdentifier: String!): CreateChatbotConversationPayload
  createCity(cityName: String!, countryName: String!, provinceName: String!, slug: String): CreateCityPayload
  createComment(commentId: String, commentObjectId: Int!, commentObjectType: String!, parentCommentId: String, text: String!, userId: Int!): CreateCommentPayload
  createContact(biography: String = null, email: String!, name: String!, slug: String!, socialNetworkingServices: JSON = [], source: String! = "exchange", title: String = null): CreateContactPayload
  createCountry(description: String, name: String!, slug: String): CreateCountryPayload
  createDataset(aliases: JSON, dataFormat: String, datasetType: String!, description: String!, geographicCoverage: String, imageFile: Upload, languages: String, license: String, name: String!, slug: String!, timeRange: String, visualizationUrl: String, website: String): CreateDatasetPayload
  createExtraAttributeDefinition(attributeRequired: Boolean! = false, attributeType: String!, choices: [String!] = [], description: String!, descriptionFallback: String = null, entityTypes: [String!]!, multipleChoice: Boolean = false, name: String!, slug: String!, title: String!, titleFallback: String = null): CreateExtraAttributeDefinitionPayload
  createMessage(location: String = null, locationType: String = null, messageDatetime: ISO8601DateTime!, messageTemplate: String!, messageType: String!, name: String!, visible: Boolean! = true): CreateMessagePayload
  createMove(description: String!, inlineResources: JSON = [], moveSlug: String, name: String!, owner: String!, playSlug: String!, resourceSlugs: [String!]): CreatePlayMovePayload
  createMoveResource(description: String!, index: Int!, moveSlug: String, name: String!, playSlug: String!, url: String!): CreatePlayMoveResourcePayload
  createOpportunity(closingDate: ISO8601Date!, contactEmail: String!, contactName: String!, description: String!, govStackEntity: Boolean = false, imageFile: Upload = null, name: String!, openingDate: ISO8601Date, opportunityOrigin: String!, opportunityStatus: String!, opportunityType: String!, slug: String!, webAddress: String): CreateOpportunityPayload
  createOrganization(aliases: JSON, description: String, endorserLevel: String, hasStorefront: Boolean, heroFile: Upload, imageFile: Upload, isEndorser: Boolean = false, isMni: Boolean, name: String!, slug: String!, website: String, whenEndorsed: ISO8601Date): CreateOrganizationPayload
  createPlay(buildingBlockSlugs: [String!], description: String!, draft: Boolean! = true, name: String!, owner: String!, playbookSlug: String = null, productSlugs: [String!], slug: String!, tags: [String!] = []): CreatePlayPayload
  createPlaybook(audience: String = "", author: String, cover: Upload, draft: Boolean! = true, name: String!, outcomes: String = "", overview: String!, owner: String!, slug: String!, tags: [String!] = []): CreatePlaybookPayload
  createProduct(aliases: JSON, commercialProduct: Boolean = false, contact: String, description: String!, extraAttributes: [ExtraAttribute!], featured: Boolean = false, govStackEntity: Boolean = false, hostingModel: String = null, imageFile: Upload, name: String!, pricingDetails: String = null, pricingModel: String = null, pricingUrl: String = null, productStage: String, slug: String!, website: String): CreateProductPayload
  createProductRepository(absoluteUrl: String!, description: String!, mainRepository: Boolean!, name: String!, productSlug: String!, slug: String!): CreateProductRepositoryPayload
  createProject(countrySlugs: [String!]!, description: String!, endDate: ISO8601Date = null, location: JSON = null, name: String!, organizationId: Int = null, productId: Int = null, projectUrl: String = null, slug: String!, startDate: ISO8601Date = null): CreateProjectPayload
  createRegion(aliases: JSON = [], description: String!, name: String!, slug: String!): CreateRegionPayload
  createResource(authors: [JSON!] = [], description: String = null, featured: Boolean, imageFile: Upload, imageUrl: String = null, linkDescription: String = null, name: String!, organizationSlug: String = null, phase: String = "", publishedDate: ISO8601Date!, resourceFile: Upload, resourceLink: String = null, resourceTopics: [String!] = [], resourceType: String = null, showInExchange: Boolean, showInWizard: Boolean, slug: String!, sourceLogoFile: Upload, sourceName: String = null, sourceWebsite: String = null): CreateResourcePayload
  createResourceTopic(description: String, imageFile: Upload, name: String!, parentTopicId: ID, slug: String!): CreateResourceTopicPayload
  createRubricCategory(description: String!, name: String!, slug: String!, weight: Float!): CreateRubricCategoryPayload
  createSector(isDisplayable: Boolean!, locale: String = null, name: String!, originId: Int = null, parentSectorId: Int = null, slug: String!): CreateSectorPayload
  createSiteSetting(defaultSetting: Boolean!, description: String!, enableMarketplace: Boolean!, exchangeLogoUrl: String!, faviconUrl: String!, name: String!, openGraphLogoUrl: String!, siteColors: JSON, slug: String!): CreateSiteSettingPayload
  createSpreadsheetData(assoc: String = "", spreadsheetData: JSON = {}, spreadsheetType: String!): CreateSpreadsheetDataPayload
  createStarredObject(sourceObjectType: String!, sourceObjectValue: String!, starredObjectType: String!, starredObjectValue: String!): CreateStarredObjectPayload
  createSync(description: String!, destination: String!, name: String!, slug: String!, source: String!, synchronizedModels: [String!]!): CreateSyncPayload
  createTag(description: String, name: String!, slug: String!): CreateTagPayload
  createTaskTracker(description: String!, name: String!, slug: String!): CreateTaskTrackerPayload
  createTenantSetting(allowUnsecuredRead: Boolean!, tenantDomains: [String!]!, tenantName: String!): CreateTenantSettingPayload
  createUseCase(description: String!, govStackEntity: Boolean = false, imageFile: Upload = null, markdownUrl: String = null, maturity: String!, name: String!, sectorSlug: String!, slug: String!): CreateUseCasePayload
  createUseCaseStep(description: String = null, name: String!, slug: String = null, stepNumber: Int!, useCaseId: Int!): CreateUseCaseStepPayload
  createUser(confirmed: Boolean, email: String!, organizations: JSON! = [], products: JSON = [], roles: JSON = [], username: String!): CreateUserPayload
  createWizardGuidanceMail(emailAddress: String!, message: String!, name: String!): CreateWizardGuidanceMailPayload
  createWorkflow(description: String!, imageFile: Upload, name: String!, slug: String!): CreateWorkflowPayload
  deleteBuildingBlock(id: ID!): DeleteBuildingBlockPayload
  deleteCandidateStatus(id: ID!): DeleteCandidateStatusPayload
  deleteCategory(id: ID!): DeleteCategoryPayload
  deleteCategoryIndicator(id: ID!): DeleteCategoryIndicatorPayload
  deleteCity(id: ID!): DeleteCityPayload
  deleteComment(commentId: String!): DeleteCommentPayload
  deleteContact(id: ID!): DeleteContactPayload
  deleteCountry(id: ID!): DeleteCountryPayload
  deleteDataset(id: ID!): DeleteDatasetPayload
  deleteExtraAttributeDefinition(id: ID!): DeleteExtraAttributeDefinitionPayload
  deleteMessage(id: ID!): DeleteMessagePayload
  deleteOpportunity(id: ID!): DeleteOpportunityPayload
  deleteOrganization(id: ID!): DeleteOrganizationPayload
  deletePlayMove(moveSlug: String!, owner: String!, playSlug: String!): DeletePlayMovePayload
  deletePlaybook(id: ID!): DeletePlaybookPayload
  deletePlaybookPlay(owner: String!, playSlug: String!, playbookSlug: String!): DeletePlaybookPlayPayload
  deleteProduct(id: ID!): DeleteProductPayload
  deleteProductRepository(id: ID!): DeleteProductRepositoryPayload
  deleteProject(id: ID!): DeleteProjectPayload
  deleteRegion(id: ID!): DeleteRegionPayload
  deleteResource(id: ID!): DeleteResourcePayload
  deleteResourceTopic(id: ID!): DeleteResourceTopicPayload
  deleteRubricCategory(id: ID!): DeleteRubricCategoryPayload
  deleteSector(id: ID!): DeleteSectorPayload
  deleteSiteSetting(id: ID!): DeleteSiteSettingPayload
  deleteSpreadsheetData(assoc: String = "", spreadsheetData: JSON = {}, spreadsheetType: String!): DeleteSpreadsheetDataPayload
  deleteSync(id: ID!): DeleteSyncPayload
  deleteTag(id: ID!): DeleteTagPayload
  deleteTenantSetting(tenantName: String!): DeleteTenantSettingPayload
  deleteUseCase(id: ID!): DeleteUseCasePayload
  deleteUser(id: ID!): DeleteUserPayload
  deleteWorkflow(id: ID!): DeleteWorkflowPayload
  duplicatePlay(playSlug: String!): DuplicatePlayPayload
  removeBookmark(data: String!, type: String!): RemoveBookmarkPayload
  removeStarredObject(sourceObjectType: String!, sourceObjectValue: String!, starredObjectType: String!, starredObjectValue: String!): RemoveStarredObjectPayload
  syncTenants(buildingBlockSlugs: [String!]!, datasetSlugs: [String!]!, destinationTenant: String!, productSlugs: [String!]!, projectSlugs: [String!]!, sourceTenant: String!, useCaseSlugs: [String!]!): SyncTenantsPayload
  updateBuildingBlockProducts(mappingStatus: String!, productSlugs: [String!]!, slug: String!): UpdateBuildingBlockProductsPayload
  updateBuildingBlockWorkflows(slug: String!, workflowSlugs: [String!]!): UpdateBuildingBlockWorkflowsPayload
  updateCandidateProductCategoryIndicators(categoryIndicatorValues: [JSON!]!, slug: String!): UpdateCandidateProductCategoryIndicatorsPayload
  updateCandidateProductExtraAttributes(extraAttributes: [ExtraAttribute!]!, slug: String!): UpdateCandidateProductExtraAttributesPayload
  updateCandidateProductStatus(candidateStatusSlug: String!, description: String, slug: String!): UpdateCandidateProductStatusPayload
  updateDatasetCountries(countrySlugs: [String!]!, slug: String!): UpdateDatasetCountriesPayload
  updateDatasetOrganizations(organizationSlugs: [String!]!, slug: String!): UpdateDatasetOrganizationsPayload
  updateDatasetSdgs(mappingStatus: String!, sdgSlugs: [String!]!, slug: String!): UpdateDatasetSdgsPayload
  updateDatasetSectors(sectorSlugs: [String!]!, slug: String!): UpdateDatasetSectorsPayload
  updateDatasetTags(slug: String!, tagNames: [String!]!): UpdateDatasetTagsPayload
  updateDescriptionEntity(description: String!, fieldName: String!, owner: String!, parentSlug: String, slug: String!, type: String!): UpdateDescriptionEntityPayload
  updateMessageVisibility(slug: String!, visibility: Boolean!): UpdateMessageVisibilityPayload
  updateOpportunityBuildingBlocks(buildingBlockSlugs: [String!]!, slug: String!): UpdateOpportunityBuildingBlocksPayload
  updateOpportunityCountries(countrySlugs: [String!]!, slug: String!): UpdateOpportunityCountriesPayload
  updateOpportunityOrganizations(organizationSlugs: [String!]!, slug: String!): UpdateOpportunityOrganizationsPayload
  updateOpportunitySectors(sectorSlugs: [String!]!, slug: String!): UpdateOpportunitySectorsPayload
  updateOpportunityTags(slug: String!, tagNames: [String!]!): UpdateOpportunityTagsPayload
  updateOpportunityUseCases(slug: String!, useCaseSlugs: [String!]!): UpdateOpportunityUseCasesPayload
  updateOrganizationBuildingBlocks(buildingBlockSlugs: [String!]!, slug: String!): UpdateOrganizationBuildingBlocksPayload
  updateOrganizationCertifications(productSlugs: [String!]!, slug: String!): UpdateOrganizationCertificationsPayload
  updateOrganizationContacts(contacts: JSON!, slug: String!): UpdateOrganizationContactsPayload
  updateOrganizationCountries(countrySlugs: [String!]!, slug: String!): UpdateOrganizationCountriesPayload
  updateOrganizationOffices(offices: [JSON!]!, slug: String!): UpdateOrganizationOfficesPayload
  updateOrganizationProducts(productSlugs: [String!]!, slug: String!): UpdateOrganizationProductsPayload
  updateOrganizationProjects(projectSlugs: [String!]!, slug: String!): UpdateOrganizationProjectsPayload
  updateOrganizationResources(resourceSlugs: [String!]!, slug: String!): UpdateOrganizationResourcesPayload
  updateOrganizationSectors(sectorSlugs: [String!]!, slug: String!): UpdateOrganizationSectorsPayload
  updateOrganizationSpecialties(slug: String!, specialties: [String!]!): UpdateOrganizationSpecialtiesPayload
  updatePlayMoves(moveSlugs: [String!]!, owner: String!, slug: String!): UpdatePlayMovesPayload
  updatePlaybookPlays(owner: String!, playSlugs: [String!]!, slug: String!): UpdatePlaybookPlaysPayload
  updateProductBuildingBlocks(buildingBlockSlugs: [String!]!, mappingStatus: String, slug: String!): UpdateProductBuildingBlocksPayload
  updateProductCategories(categorySlugs: [String!]!, featureSlugs: [String!]!, slug: String!): UpdateProductCategoriesPayload
  updateProductCountries(countrySlugs: [String!]!, slug: String!): UpdateProductCountriesPayload
  updateProductExtraAttributes(extraAttributes: [ExtraAttribute!]!, slug: String!): UpdateProductExtraAttributesPayload
  updateProductIndicators(indicatorsData: [JSON!]!, slug: String!): UpdateProductIndicatorsPayload
  updateProductOrganizations(organizationSlugs: [String!]!, slug: String!): UpdateProductOrganizationsPayload
  updateProductProjects(projectSlugs: [String!]!, slug: String!): UpdateProductProjectsPayload
  updateProductResources(resourceSlugs: [String!]!, slug: String!): UpdateProductResourcesPayload
  updateProductSdgs(mappingStatus: String!, sdgSlugs: [String!]!, slug: String!): UpdateProductSdgsPayload
  updateProductSectors(sectorSlugs: [String!]!, slug: String!): UpdateProductSectorsPayload
  updateProductStage(productStage: String!, slug: String!): UpdateProductStagePayload
  updateProductTags(slug: String!, tagNames: [String!]!): UpdateProductTagsPayload
  updateProjectCountries(countrySlugs: [String!]!, slug: String!): UpdateProjectCountriesPayload
  updateProjectOrganizations(organizationSlugs: [String!]!, slug: String!): UpdateProjectOrganizationsPayload
  updateProjectProducts(productSlugs: [String!]!, slug: String!): UpdateProjectProductsPayload
  updateProjectSdgs(sdgSlugs: [String!]!, slug: String!): UpdateProjectSdgsPayload
  updateProjectSectors(sectorSlugs: [String!]!, slug: String!): UpdateProjectSectorsPayload
  updateProjectTags(slug: String!, tagNames: [String!]!): UpdateProjectTagsPayload
  updateRegionCountries(countrySlugs: [String!]!, slug: String!): UpdateRegionCountriesPayload
  updateResourceBuildingBlocks(buildingBlockSlugs: [String!]!, mappingStatus: String, slug: String!): UpdateResourceBuildingBlocksPayload
  updateResourceCountries(countrySlugs: [String!]!, slug: String!): UpdateResourceCountriesPayload
  updateResourceProducts(productSlugs: [String!]!, slug: String!): UpdateResourceProductsPayload
  updateResourceResourceTopics(resourceTopicNames: [String!]!, slug: String!): UpdateResourceResourceTopicsPayload
  updateResourceTags(slug: String!, tagNames: [String!]!): UpdateResourceTagsPayload
  updateResourceUseCases(slug: String!, useCaseSlugs: [String!]!): UpdateResourceUseCasesPayload
  updateRubricCategoryIndicators(categoryIndicatorSlugs: [String!]!, rubricCategorySlug: String!): UpdateRubricCategoryIndicatorsPayload
  updateSiteSettingCarouselConfiguration(calloutTitle: String!, description: String!, destinationUrl: String!, external: Boolean!, id: String!, imageUrl: String!, name: String!, siteSettingSlug: String!, style: String!, title: String!, type: String!): UpdateSiteSettingCarouselConfigurationPayload
  updateSiteSettingCarouselConfigurations(carouselConfigurations: JSON! = [], siteSettingSlug: String!): UpdateSiteSettingCarouselConfigurationsPayload
  updateSiteSettingHeroCardConfiguration(description: String!, destinationUrl: String!, external: Boolean!, id: String!, imageUrl: String!, name: String!, siteSettingSlug: String!, title: String!, type: String!): UpdateSiteSettingHeroCardConfigurationPayload
  updateSiteSettingHeroCardSection(description: String, heroCardConfigurations: JSON! = [], siteSettingSlug: String!, title: String, wysiwygDescription: String): UpdateSiteSettingHeroCardSectionPayload
  updateSiteSettingItemSettings(itemConfigurations: JSON! = [], itemLayouts: JSON! = {}): UpdateSiteSettingItemSettingsPayload
  updateSiteSettingMenuConfiguration(destinationUrl: String, external: Boolean, id: String!, name: String!, parentId: String, siteSettingSlug: String!, type: String!): UpdateSiteSettingMenuConfigurationPayload
  updateSiteSettingMenuConfigurations(menuConfigurations: JSON!, siteSettingSlug: String!): UpdateSiteSettingMenuConfigurationsPayload
  updateSiteSettingSectionSettings(sectionConfigurations: JSON! = []): UpdateSiteSettingSectionSettingsPayload
  updateUseCaseSdgTargets(sdgTargetIds: [Int!]!, slug: String!): UpdateUseCaseSdgTargetsPayload
  updateUseCaseStepBuildingBlocks(buildingBlockSlugs: [String!]!, slug: String!): UpdateUseCaseStepBuildingBlocksPayload
  updateUseCaseStepDatasets(datasetSlugs: [String!]!, slug: String!): UpdateUseCaseStepDatasetsPayload
  updateUseCaseStepProducts(productSlugs: [String!]!, slug: String!): UpdateUseCaseStepProductsPayload
  updateUseCaseStepWorkflows(slug: String!, workflowSlugs: [String!]!): UpdateUseCaseStepWorkflowsPayload
  updateUseCaseTags(slug: String!, tagNames: [String!]!): UpdateUseCaseTagsPayload
  updateWorkflowBuildingBlocks(buildingBlockSlugs: [String!]!, slug: String!): UpdateWorkflowBuildingBlocksPayload
}

type Office {
  city: String!
  cityData: City
  country: Country!
  id: ID!
  latitude: String!
  longitude: String!
  name: String!
  organization: Organization!
  province: Province!
  slug: String!
}

"""
Input attributes for pagination
"""
input OffsetAttributes {
  limit: Int
  offset: Int!
}

type OperatorService {
  countryId: Int
  id: ID!
  name: String!
  service: String!
}

type Opportunity {
  buildingBlocks: [BuildingBlock!]!
  closingDate: ISO8601Date
  contactEmail: String
  contactName: String
  countries: [Country!]!
  description: String!
  govStackEntity: Boolean!
  id: ID!
  imageFile: String!
  name: String!
  openingDate: ISO8601Date
  opportunityStatus: String!
  opportunityType: String!
  organizations: [Organization!]!
  origin: Origin!
  parsedDescription: String
  requirements: String
  sectors: [Sector!]!
  slug: String!
  tags: JSON!
  useCases: [UseCase!]!
  webAddress: String
}

type Organization {
  aliases: JSON
  buildingBlockCertifications: [BuildingBlock!]!
  buildingBlocks: [String!]!
  certifications: [String!]!
  contacts: [Contact!]!
  countries: [Country!]!
  endorserLevel: String
  hasStorefront: Boolean
  haveOwner: Boolean!
  heroFile: String
  id: ID!
  imageFile: String!
  isEndorser: Boolean
  isMni: Boolean
  name: String!
  offices: [Office!]!
  organizationDescription: OrganizationDescription
  organizationDescriptions: [OrganizationDescription!]!
  parsedDescription: String
  productCertifications: [Product!]!
  products: [Product!]!
  projects: [Project!]!
  resources: [Resource!]!
  sectors: [Sector!]!
  slug: String!
  specialties: [String!]!
  starredProjects: [Project!]!
  website: String
  whenEndorsed: ISO8601Date
}

type OrganizationDescription {
  description: String!
  id: ID!
  locale: String!
  organizationId: Int
}

type Origin {
  id: ID!
  name: String
  slug: String!
}

type PageContent {
  assets: String
  components: String
  css: String
  editorType: String
  handbookPageId: Int
  html: String!
  id: ID!
  locale: String!
  styles: String
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

"""
Output attributes for pagination
"""
type PaginationAttributes {
  totalCount: Int!
}

type Play {
  buildingBlocks: [BuildingBlock!]
  createdAt: ISO8601DateTime!
  draft: Boolean!
  id: ID!
  imageFile: String!
  maturity: String
  name: String!
  playDescription: PlayDescription
  playDescriptions: [PlayDescription!]
  playMoves: [PlayMove!]
  products: [Product!]
  slug: String!
  tags: JSON!
  updatedAt: ISO8601DateTime!
}

"""
The connection type for Play.
"""
type PlayConnection {
  """
  A list of edges.
  """
  edges: [PlayEdge]

  """
  A list of nodes.
  """
  nodes: [Play]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

type PlayDescription {
  description: String!
  id: ID!
  locale: String!
  playId: Int
}

"""
An edge in a connection.
"""
type PlayEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Play
}

type PlayMove {
  id: ID!
  inlineResources: JSON!
  moveDescription: PlayMoveDescription
  moveDescriptions: [PlayMoveDescription!]
  moveOrder: Int
  name: String!
  play: Play!
  playName: String
  playSlug: String
  resources: [Resource!]
  slug: String!
}

"""
The connection type for PlayMove.
"""
type PlayMoveConnection {
  """
  A list of edges.
  """
  edges: [PlayMoveEdge]

  """
  A list of nodes.
  """
  nodes: [PlayMove]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

type PlayMoveDescription {
  description: String!
  id: ID!
  locale: String!
  moveId: Int
}

"""
An edge in a connection.
"""
type PlayMoveEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: PlayMove
}

type Playbook {
  author: String
  createdAt: ISO8601DateTime!
  draft: Boolean!
  id: ID!
  imageFile: String!
  name: String!
  ownedBy: String!
  phases: JSON!
  playbookDescription: PlaybookDescription
  playbookDescriptions: [PlaybookDescription!]
  playbookPlays: [PlaybookPlay!]
  plays: [Play!]
  slug: String!
  tags: JSON!
  updatedAt: ISO8601DateTime!
}

type PlaybookDescription {
  audience: String!
  cover: String
  id: ID!
  locale: String!
  outcomes: String!
  overview: String!
  playbookId: Int
  sanitizedOverview: String!
}

type PlaybookPlay {
  id: ID!
  playName: String
  playOrder: Int
  playSlug: String
  playbookSlug: String
}

type Product {
  aliases: JSON
  approvalStatus: CandidateStatus
  buildingBlocks: [BuildingBlock!]
  buildingBlocksMappingStatus: String
  commercialProduct: Boolean!
  contact: String
  countries: [Country!]
  currentProjects(first: Int): [Project!]
  endorsers: [Endorser!]
  extraAttributes: [JSON!]
  featured: Boolean
  govStackEntity: Boolean!
  haveOwner: Boolean!
  hostingModel: String
  id: ID!
  imageFile: String!
  includes: [Product!]
  interoperatesWith: [Product!]
  isLaunchable: Boolean
  isLinkedWithDpi: Boolean!
  languages: JSON
  mainRepository: ProductRepository
  manualUpdate: Boolean!
  maturityScoreDetails: JSON
  name: String!
  notAssignedCategoryIndicators: [CategoryIndicator!]
  organizations: [Organization!]
  origins: [Origin!]
  overallMaturityScore: Float
  owner: String
  parsedDescription: String
  playbooks: [Playbook!]
  pricingDetails: String
  pricingModel: String
  productDescription: ProductDescription
  productDescriptions: [ProductDescription!]
  productIndicators: [ProductIndicator!]
  productStage: String
  productType: String!
  projects: [Project!]
  resources: [Resource!]
  sdgs: [SustainableDevelopmentGoal!]
  sdgsMappingStatus: String
  sectors: [Sector!]
  slug: String!
  softwareCategories: [SoftwareCategory!]
  softwareFeatures: [SoftwareFeature!]
  sustainableDevelopmentGoals: [SustainableDevelopmentGoal!]
  sustainableDevelopmentGoalsMappingStatus: String
  tags: JSON
  website: String
}

"""
The connection type for Product.
"""
type ProductConnection {
  """
  A list of edges.
  """
  edges: [ProductEdge]

  """
  A list of nodes.
  """
  nodes: [Product]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

type ProductDescription {
  description: String!
  id: ID!
  locale: String!
  productId: Int
}

"""
An edge in a connection.
"""
type ProductEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Product
}

type ProductIndicator {
  categoryIndicator: CategoryIndicator!
  categoryIndicatorId: ID!
  id: ID!
  indicatorValue: String!
  productId: ID!
}

type ProductRepository {
  absoluteUrl: String!
  description: String!
  id: ID!
  languageData: JSON
  license: String
  mainRepository: String!
  name: String
  product: Product
  slug: String!
  statisticalData: JSON
}

type Project {
  countries: [Country!]
  endDate: ISO8601Date
  id: ID!
  latitude: Float
  location: JSON
  longitude: Float
  name: String!
  organizations: [Organization!]
  origin: Origin
  parsedDescription: String
  products: [Product!]
  projectDescription: ProjectDescription
  projectDescriptions: [ProjectDescription!]
  projectWebsite: String
  sdgs: [SustainableDevelopmentGoal!]
  sectors: [Sector!]
  slug: String!
  startDate: ISO8601Date
  sustainableDevelopmentGoals: [SustainableDevelopmentGoal!]
  tags: JSON
}

type ProjectDescription {
  description: String!
  id: ID!
  locale: String!
  projectId: Int
}

type Province {
  country: Country!
  id: ID!
  latitude: String!
  longitude: String!
  name: String!
  slug: String!
}

type Query {
  adliConfiguration: JSON!
  aggregator(slug: String!): Organization
  aggregators(search: String = ""): [Organization!]!
  author(slug: String!): Author
  authors(search: String = ""): [Author!]!
  bookmark(id: ID!): Bookmark
  buildingBlock(slug: String!): BuildingBlock
  buildingBlocks(search: String = ""): [BuildingBlock!]!
  candidateDataset(slug: String!): CandidateDataset
  candidateDatasets(search: String = ""): [CandidateDataset!]!
  candidateOrganization(slug: String!): CandidateOrganization
  candidateOrganizations(search: String = ""): [CandidateOrganization!]!
  candidateProduct(slug: String!): CandidateProduct
  candidateProductExtraAttributes: JSON!
  candidateProducts(search: String = ""): [CandidateProduct!]!
  candidateResource(slug: String!): CandidateResource
  candidateResources(search: String = ""): [CandidateResource!]!
  candidateRole(datasetId: String = null, email: String = null, id: ID = null, organizationId: String = null, productId: String = null): CandidateRole
  candidateRoles(datasetId: String = null, organizationId: String = null, productId: String = null): [CandidateRole!]!
  candidateStatus(slug: String!): CandidateStatus
  candidateStatuses(search: String = ""): [CandidateStatus!]!
  capabilities(aggregatorIds: [Int!] = [], capabilities: [String!] = [], countryIds: [Int!] = [], search: String = "", services: [String!] = []): [Capability!]!
  capabilityOnly(search: String = ""): [Capability!]!
  categoryIndicator(slug: String!): CategoryIndicator
  categoryIndicators(search: String = ""): [CategoryIndicator!]!
  chatbotConversationStarters: JSON!
  chatbotConversations(currentIdentifier: String = null, sessionIdentifier: String!): [ChatbotConversation!]!
  cities(search: String = ""): [City!]!
  city(slug: String!): City
  comments(commentObjectId: Int!, commentObjectType: String!): [Comment!]!
  compareProducts(slugs: [String!]!): JSON!
  contact(slug: String!, source: String! = "exchange"): Contact
  contacts(search: String = ""): [Contact!]!
  countComments(commentObjectId: Int!, commentObjectType: String!): Int!
  countries(search: String = ""): [Country!]!
  countriesWithResources(search: String = ""): [Country!]!
  country(slug: String!): Country
  dataset(slug: String!): Dataset
  datasets(search: String = ""): [Dataset!]!
  defaultSiteSetting: SiteSetting
  endorsers(search: String = ""): [Endorser!]!
  exportPageContents(locale: String = "en", pageIds: [Int!]!): ExportedPdf!
  extraAttributeDefinition(slug: String!): ExtraAttributeDefinition
  extraAttributeDefinitions(search: String = ""): [ExtraAttributeDefinition!]!
  handbook(slug: String!): Handbook!
  handbooks: [Handbook!]!
  hubContact(email: String!, source: String! = "exchange"): Contact
  hubContacts(alumni: Boolean = false, search: String = ""): [Contact!]!
  initialCandidateStatuses(search: String = ""): [CandidateStatus!]!
  me: User!
  message(slug: String!): Message
  messages(search: String = ""): [Message!]!
  move(playSlug: String!, slug: String!): PlayMove
  moves(search: String = ""): [PlayMove!]!
  operatorServiceOnly(search: String = ""): [OperatorService!]!
  operatorServices(operatorIds: [Int!] = [], operators: [String!] = [], search: String = ""): [OperatorService!]!
  opportunities(search: String = ""): [Opportunity!]!
  opportunity(slug: String!): Opportunity
  organization(slug: String!): Organization
  organizations(aggregatorOnly: Boolean = false, search: String = ""): [Organization!]!
  origin(slug: String!): Origin!
  origins(search: String!): [Origin!]!
  ownedDatasets: [Dataset!]!
  ownedProducts: [Product!]!
  owners(captcha: String!, slug: String!, type: String!): [User!]!
  pageContents(handbookPageId: ID!, locale: String = "en"): PageContent!
  paginatedBuildingBlocks(categoryTypes: [String!] = [], filterBlocks: [String!] = [], offsetAttributes: OffsetAttributes!, sdgs: [String!] = [], search: String = "", showGovStackOnly: Boolean = false, showMature: Boolean = false, useCases: [String!] = [], workflows: [String!] = []): [BuildingBlock!]!
  paginatedCandidateDatasets(offsetAttributes: OffsetAttributes!, search: String = ""): [CandidateDataset!]!
  paginatedCandidateOrganizations(offsetAttributes: OffsetAttributes!, search: String = ""): [CandidateOrganization!]!
  paginatedCandidateProducts(currentUserOnly: Boolean = false, offsetAttributes: OffsetAttributes!, search: String = ""): [CandidateProduct!]!
  paginatedCandidateResources(countries: [String!] = [], inReviewOnly: Boolean = false, offsetAttributes: OffsetAttributes!, search: String = ""): [CandidateResource!]!
  paginatedCandidateRoles(offsetAttributes: OffsetAttributes!, search: String = ""): [CandidateRole!]!
  paginatedCandidateStatuses(offsetAttributes: OffsetAttributes!, search: String = ""): [CandidateStatus!]!
  paginatedCities(offsetAttributes: OffsetAttributes!, search: String = ""): [City!]!
  paginatedContacts(offsetAttributes: OffsetAttributes!, search: String = ""): [Contact!]!
  paginatedCountries(offsetAttributes: OffsetAttributes!, search: String = ""): [Country!]!
  paginatedDatasets(countries: [String!] = [], datasetTypes: [String!] = [], offsetAttributes: OffsetAttributes!, origins: [String!] = [], sdgs: [String!] = [], search: String = "", sectors: [String!] = [], tags: [String!] = []): [Dataset!]!
  paginatedExtraAttributeDefinitions(offsetAttributes: OffsetAttributes!, search: String = ""): [ExtraAttributeDefinition!]!
  paginatedMessages(messageType: String = "", offsetAttributes: OffsetAttributes!, search: String = "", visibleOnly: Boolean = false): [Message!]!
  paginatedOpportunities(buildingBlocks: [String!] = [], countries: [String!] = [], offsetAttributes: OffsetAttributes!, organizations: [String!] = [], search: String = "", sectors: [String!] = [], showClosed: Boolean = false, showGovStackOnly: Boolean = false, tags: [String!] = [], useCases: [String!] = []): [Opportunity!]!
  paginatedOrganizations(aggregatorOnly: Boolean = false, countries: [String!] = [], endorserOnly: Boolean = false, offsetAttributes: OffsetAttributes!, search: String = "", sectors: [String!] = [], years: [Int!] = []): [Organization!]!
  paginatedPlaybooks(offsetAttributes: OffsetAttributes!, owner: String!, search: String = "", tags: [String!] = []): [Playbook!]!
  paginatedProducts(buildingBlocks: [String!] = [], countries: [String!] = [], featured: Boolean = null, isLinkedWithDpi: Boolean = false, licenseTypes: [String!] = [], offsetAttributes: OffsetAttributes!, origins: [String!] = [], productStage: String = null, sdgs: [String!] = [], search: String = "", sectors: [String!] = [], showDpgaOnly: Boolean = false, showGovStackOnly: Boolean = false, softwareCategories: [String!] = [], softwareFeatures: [String!] = [], tags: [String!] = [], useCases: [String!] = [], workflows: [String!] = []): [Product!]!
  paginatedProjects(countries: [String!] = [], offsetAttributes: OffsetAttributes!, organizations: [String!] = [], origins: [String!] = [], products: [String!] = [], sdgs: [String!] = [], search: String = "", sectors: [String!] = [], tags: [String!] = []): [Project!]!
  paginatedRegions(offsetAttributes: OffsetAttributes!, search: String = ""): [Region!]!
  paginatedResourceTopics(offsetAttributes: OffsetAttributes!, search: String = ""): [ResourceTopic!]!
  paginatedResources(countries: [String!] = [], offsetAttributes: OffsetAttributes!, resourceTopics: [String!] = [], resourceTypes: [String!] = [], search: String = "", showInExchange: Boolean = false, showInWizard: Boolean = false, tags: [String!] = []): [Resource!]!
  paginatedSectors(offsetAttributes: OffsetAttributes!, search: String = ""): [Sector!]!
  paginatedSiteSettings(offsetAttributes: OffsetAttributes!, search: String = ""): [SiteSetting!]!
  paginatedStorefronts(buildingBlocks: [String!] = [], certifications: [String!] = [], countries: [String!] = [], offsetAttributes: OffsetAttributes!, search: String = "", sectors: [String!] = [], specialties: [String!] = []): [Organization!]!
  paginatedSyncs(offsetAttributes: OffsetAttributes!, search: String = ""): [Sync!]!
  paginatedTags(offsetAttributes: OffsetAttributes!, search: String = ""): [Tag!]!
  paginatedTaskTrackers(offsetAttributes: OffsetAttributes!, search: String = "", showFailedOnly: Boolean = false): [TaskTracker!]!
  paginatedUseCases(offsetAttributes: OffsetAttributes!, sdgs: [String!] = [], search: String = "", showBeta: Boolean = false, showGovStackOnly: Boolean = false): [UseCase!]!
  paginatedUsers(offsetAttributes: OffsetAttributes!, roles: [String!] = [], search: String = ""): [User!]!
  paginatedWizardUseCases(offsetAttributes: OffsetAttributes!, sdgs: [String!] = [], sectors: [String!] = [], useCases: [String!] = []): [UseCase!]!
  paginatedWorkflows(offsetAttributes: OffsetAttributes!, sdgs: [String!] = [], search: String = "", useCases: [String!] = []): [Workflow!]!
  paginationAttributeBuildingBlock(categoryTypes: [String!] = [], filterBlocks: [String!] = [], sdgs: [String!] = [], search: String = "", showGovStackOnly: Boolean = false, showMature: Boolean = false, useCases: [String!] = [], workflows: [String!] = []): PaginationAttributes!
  paginationAttributeCandidateDataset(search: String = ""): PaginationAttributes!
  paginationAttributeCandidateOrganization(search: String = ""): PaginationAttributes!
  paginationAttributeCandidateProduct(currentUserOnly: Boolean = false, search: String = ""): PaginationAttributes!
  paginationAttributeCandidateResource(countries: [String!] = [], inReviewOnly: Boolean = false, search: String = ""): PaginationAttributes!
  paginationAttributeCandidateRole(search: String = ""): PaginationAttributes!
  paginationAttributeCandidateStatus(search: String = ""): PaginationAttributes!
  paginationAttributeCity(search: String = ""): PaginationAttributes!
  paginationAttributeContact(search: String = ""): PaginationAttributes!
  paginationAttributeCountry(search: String = ""): PaginationAttributes!
  paginationAttributeDataset(countries: [String!] = [], datasetTypes: [String!] = [], origins: [String!] = [], sdgs: [String!] = [], search: String = "", sectors: [String!] = [], tags: [String!] = []): PaginationAttributes!
  paginationAttributeExtraAttributeDefinition(search: String = ""): PaginationAttributes!
  paginationAttributeMessage(messageType: String = "", search: String = "", visibleOnly: Boolean = false): PaginationAttributes!
  paginationAttributeOpportunity(buildingBlocks: [String!] = [], countries: [String!] = [], organizations: [String!] = [], search: String = "", sectors: [String!] = [], showClosed: Boolean = false, showGovStackOnly: Boolean = false, tags: [String!] = [], useCases: [String!] = []): PaginationAttributes!
  paginationAttributeOrganization(aggregatorOnly: Boolean = false, countries: [String!] = [], endorserOnly: Boolean = false, search: String = "", sectors: [String!] = [], years: [Int!] = []): PaginationAttributes!
  paginationAttributePlaybook(owner: String!, search: String = "", tags: [String!] = []): PaginationAttributes!
  paginationAttributeProduct(buildingBlocks: [String!] = [], countries: [String!] = [], featured: Boolean = null, isLinkedWithDpi: Boolean = false, licenseTypes: [String!] = [], origins: [String!] = [], productStage: String = null, sdgs: [String!] = [], search: String = "", sectors: [String!] = [], showDpgaOnly: Boolean = false, showGovStackOnly: Boolean = false, softwareCategories: [String!] = [], softwareFeatures: [String!] = [], tags: [String!] = [], useCases: [String!] = [], workflows: [String!] = []): PaginationAttributes!
  paginationAttributeProject(countries: [String!] = [], organizations: [String!] = [], origins: [String!] = [], products: [String!] = [], sdgs: [String!] = [], search: String = "", sectors: [String!] = [], tags: [String!] = []): PaginationAttributes!
  paginationAttributeRegion(search: String = ""): PaginationAttributes!
  paginationAttributeResource(countries: [String!] = [], resourceTopics: [String!] = [], resourceTypes: [String!] = [], search: String = "", showInExchange: Boolean = false, showInWizard: Boolean = false, tags: [String!] = []): PaginationAttributes!
  paginationAttributeResourceTopic(search: String = ""): PaginationAttributes!
  paginationAttributeSector(search: String = ""): PaginationAttributes!
  paginationAttributeSiteSetting(search: String = ""): PaginationAttributes!
  paginationAttributeStorefront(buildingBlocks: [String!] = [], certifications: [String!] = [], countries: [String!] = [], search: String = "", sectors: [String!] = [], specialties: [String!] = []): PaginationAttributes!
  paginationAttributeSync(search: String = ""): PaginationAttributes!
  paginationAttributeTag(search: String = ""): PaginationAttributes!
  paginationAttributeTaskTracker(search: String = "", showFailedOnly: Boolean = false): PaginationAttributes!
  paginationAttributeUseCase(sdgs: [String!] = [], search: String = "", showBeta: Boolean = false, showGovStackOnly: Boolean = false): PaginationAttributes!
  paginationAttributeUser(roles: [String!] = [], search: String = ""): PaginationAttributes!
  paginationAttributeWorkflow(sdgs: [String!] = [], search: String = "", useCases: [String!] = []): PaginationAttributes!
  paginationWizardAttributeUseCase(sdgs: [String!] = [], sectors: [String!] = [], useCases: [String!] = []): PaginationAttributes!
  play(owner: String!, slug: String!): Play
  playbook(owner: String!, slug: String!): Playbook
  playbooks(owner: String!, search: String = ""): [Playbook!]!
  plays(owner: String!, playbookSlug: String = "", search: String = ""): [Play!]!
  product(slug: String!): Product
  productRepositories(slug: String!): [ProductRepository!]!
  productRepository(productSlug: String = "", slug: String!): ProductRepository
  products(search: String = ""): [Product!]!
  project(slug: String!): Project
  projects(search: String = ""): [Project!]!
  region(slug: String!): Region
  regions(search: String = ""): [Region!]!
  resource(slug: String!): Resource
  resourceTopic(slug: String!): ResourceTopic
  resourceTopicResources(countries: [String!] = [], resourceTypes: [String!] = [], search: String = "", slug: String!): [Resource!]
  resourceTopics(search: String = ""): [ResourceTopic!]!
  resourceTypes(search: String = ""): [ResourceType!]!
  resources(search: String = ""): [Resource!]!
  rubricCategories(search: String): [RubricCategory!]!
  rubricCategory(slug: String!): RubricCategory
  sdg(slug: String!): SustainableDevelopmentGoal
  sdgTarget(slug: String!): SustainableDevelopmentGoalTarget
  sdgTargets(search: String = ""): [SustainableDevelopmentGoalTarget!]!
  sdgs(search: String = ""): [SustainableDevelopmentGoal!]!
  searchCountryProjects(country: String! = "", products: [String!] = [], search: String = "", sectors: [String!] = [], tags: [String!] = []): [Project!]!
  searchHandbook(search: String!, slug: String!): [HandbookSearchPage!]!
  searchMoves(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    search: String = ""
  ): PlayMoveConnection!
  searchOrganizations(aggregatorOnly: Boolean = false, aggregators: [String!] = [], countries: [String!] = [], search: String = "", sectors: [String!] = [], years: [Int!] = []): [Organization!]!
  searchPlaybookPlays(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    owner: String!
    slug: String!
  ): PlayConnection!
  searchPlaybookTags(owner: String!, search: String = ""): [Tag!]!
  searchPlays(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    owner: String!
    products: [String!] = []
    search: String = ""
  ): PlayConnection!
  searchProducts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    countries: [String!] = []

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    products: [String!] = []
    search: String = ""
  ): ProductConnection!
  searchProjects(products: [String!] = [], search: String = "", sectors: [String!] = [], tags: [String!] = []): [Project!]!
  sector(slug: String!): Sector
  sectors(locale: String = "en", search: String = ""): [Sector!]!
  siteSetting(slug: String = null): SiteSetting
  siteSettings: [SiteSetting!]
  softwareCategories(search: String = ""): [SoftwareCategory!]!
  softwareCategory(slug: String!): SoftwareCategory
  softwareFeature(slug: String!): SoftwareFeature
  softwareFeatures(categorySlug: String!): [SoftwareFeature!]!
  spreadsheetDataset: [DialSpreadsheetData!]!
  spreadsheetProduct: [DialSpreadsheetData!]!
  starredObject(sourceObjectType: String!, sourceObjectValue: String!, starredObjectType: String!, starredObjectValue: String!): StarredObject
  starredObjects(sourceObjectType: String!, sourceObjectValue: String!): [StarredObject!]!
  sync(slug: String!): Sync
  syncs(search: String = ""): [Sync!]!
  tag(slug: String!): Tag
  tags(search: String = ""): [Tag!]!
  taskTracker(slug: String!): TaskTracker
  taskTrackers(search: String = ""): [TaskTracker!]!
  tenantSetting(tenantName: String = null): TenantSetting
  tenantSettings: [TenantSetting!]
  useCase(slug: String!): UseCase
  useCaseStep(slug: String!): UseCaseStep
  useCaseSteps(slug: String!): [UseCaseStep!]!
  useCases(mature: Boolean = false, search: String = ""): [UseCase!]!
  useCasesForSector(sectorSlugs: [String!]!): [UseCase!]!
  useCasesSteps(search: String = ""): [UseCaseStep!]!
  user(userId: String!): User
  userAuthenticationTokenCheck(userAuthenticationToken: String!, userId: Int!): Boolean!
  userEmailCheck(email: String!): Boolean!
  userRoles: JSON!
  users(search: String = ""): [User!]!
  wizard: Wizard!
  workflow(slug: String!): Workflow
  workflows(search: String = ""): [Workflow!]!
}

type Region {
  aliases: JSON
  countries: [Country!]
  description: String!
  id: ID!
  name: String!
  slug: String!
}

"""
Autogenerated return type of RemoveBookmark.
"""
type RemoveBookmarkPayload {
  bookmark: Bookmark
  errors: [String!]
}

"""
Autogenerated return type of RemoveStarredObject.
"""
type RemoveStarredObjectPayload {
  errors: [String!]
  starredObject: StarredObject
}

type Resource {
  authors: [Author!]!
  buildingBlocks: [BuildingBlock!]
  buildingBlocksMappingStatus: String
  countries: [Country!]!
  description: String
  featured: Boolean!
  id: ID!
  imageFile: String!
  imageUrl: String
  linkDescription: String
  name: String!
  organizations: [Organization!]!
  parsedDescription: String
  phase: String!
  products: [Product!]!
  publishedDate: ISO8601Date
  resourceFile: String
  resourceLink: String
  resourceTopics: [ResourceTopic!]
  resourceType: String
  showInExchange: Boolean!
  showInWizard: Boolean!
  slug: String!
  source: Organization
  submittedBy: User
  tags: JSON!
  useCases: [UseCase!]!
}

type ResourceTopic {
  id: ID!
  imageFile: String!
  name: String!
  parentTopic: ResourceTopic
  resourceTopicDescription: ResourceTopicDescription
  resourceTopicDescriptions: [ResourceTopicDescription!]
  resources: [Resource!]!
  slug: String!
  subtopics: [ResourceTopic!]
}

type ResourceTopicDescription {
  description: String!
  id: ID!
  locale: String!
  resourceTopicId: Int
}

type ResourceType {
  description: String
  id: ID!
  locale: String!
  name: String!
  slug: String!
}

type RubricCategory {
  categoryIndicators: [CategoryIndicator!]
  id: ID!
  name: String!
  rubricCategoryDescription: RubricCategoryDescription
  rubricCategoryDescriptions: [RubricCategoryDescription!]
  slug: String!
  weight: Float!
}

type RubricCategoryDescription {
  description: String!
  id: ID!
  locale: String!
  rubricCategoryId: Int
}

type Sector {
  datasets: [Dataset!]!
  id: ID!
  isDisplayable: Boolean
  locale: String
  name: String!
  organizations: [Organization!]!
  origin: Origin!
  originId: Int
  parentSectorId: ID
  products: [Product!]!
  projects: [Project!]!
  slug: String!
  subSectors: [Sector!]
}

type SimpleUser {
  email: String!
  id: ID!
  username: String!
}

type SiteSetting {
  carouselConfigurations: JSON!
  defaultSetting: Boolean!
  description: String
  enableMarketplace: Boolean!
  exchangeLogoUrl: String!
  faviconUrl: String!
  heroCardSection: JSON!
  id: ID!
  itemConfigurations: JSON!
  itemLayouts: JSON!
  menuConfigurations: JSON!
  name: String!
  openGraphLogoUrl: String!
  sectionConfigurations: JSON!
  siteColors: JSON!
  slug: String!
}

type SoftwareCategory {
  description: String!
  id: ID!
  name: String!
  slug: String!
  softwareFeatures: [SoftwareFeature!]
}

type SoftwareFeature {
  categoryId: Int!
  description: String!
  facilityScale: Int
  id: ID!
  name: String!
  slug: String!
  softwareCategory: SoftwareCategory!
}

type StarredObject {
  id: ID!
  sourceObjectType: String!
  sourceObjectValue: String!
  starredByEmail: String!
  starredDate: ISO8601Date!
  starredObjectType: String!
  starredObjectValue: String!
}

type SustainableDevelopmentGoal {
  id: ID!
  imageFile: String!
  longTitle: String!
  name: String!
  number: Int!
  sdgTargets: [SustainableDevelopmentGoalTarget!]!
  slug: String!
}

type SustainableDevelopmentGoalTarget {
  id: ID!
  imageFile: String!
  name: String!
  sdg: SustainableDevelopmentGoal!
  sdgNumber: String!
  sustainableDevelopmentGoal: SustainableDevelopmentGoal!
  targetNumber: String!
  useCases: [UseCase!]
}

type Sync {
  description: String!
  id: ID!
  lastSyncAt: ISO8601Date
  name: String!
  slug: String!
  syncConfiguration: JSON!
  syncEnabled: Boolean!
  tenantDestination: String!
  tenantSource: String!
}

"""
Autogenerated return type of SyncTenants.
"""
type SyncTenantsPayload {
  errors: [String!]
  syncCompleted: String
}

type Tag {
  datasets: [Dataset!]!
  id: ID!
  name: String!
  products: [Product!]!
  projects: [Project!]!
  slug: String!
  tagDescription: TagDescription
  tagDescriptions: [TagDescription!]
  useCases: [UseCase!]!
}

type TagDescription {
  description: String!
  id: ID!
  locale: String!
  tagId: Int
}

type TaskTracker {
  id: ID!
  lastReceivedMessage: String!
  lastStartedDate: ISO8601DateTime
  name: String!
  slug: String!
  taskCompleted: Boolean!
  taskTrackerDescription: TaskTrackerDescription
  taskTrackerDescriptions: [TaskTrackerDescription!]
}

type TaskTrackerDescription {
  description: String!
  id: ID!
  locale: String!
  taskTrackerId: Int
}

type TenantSetting {
  allowUnsecuredRead: Boolean!
  id: ID!
  initialized: Boolean!
  tenantDomains: [String!]!
  tenantName: String!
}

"""
Autogenerated return type of UpdateBuildingBlockProducts.
"""
type UpdateBuildingBlockProductsPayload {
  buildingBlock: BuildingBlock
  errors: [String!]
}

"""
Autogenerated return type of UpdateBuildingBlockWorkflows.
"""
type UpdateBuildingBlockWorkflowsPayload {
  buildingBlock: BuildingBlock
  errors: [String!]
}

"""
Autogenerated return type of UpdateCandidateProductCategoryIndicators.
"""
type UpdateCandidateProductCategoryIndicatorsPayload {
  candidateProduct: CandidateProduct
  errors: [String!]
}

"""
Autogenerated return type of UpdateCandidateProductExtraAttributes.
"""
type UpdateCandidateProductExtraAttributesPayload {
  candidateProduct: CandidateProduct
  errors: [String!]
  product: Product
}

"""
Autogenerated return type of UpdateCandidateProductStatus.
"""
type UpdateCandidateProductStatusPayload {
  candidateProduct: CandidateProduct
  errors: [String!]
}

"""
Autogenerated return type of UpdateDatasetCountries.
"""
type UpdateDatasetCountriesPayload {
  dataset: Dataset
  errors: [String!]
}

"""
Autogenerated return type of UpdateDatasetOrganizations.
"""
type UpdateDatasetOrganizationsPayload {
  dataset: Dataset
  errors: [String!]
}

"""
Autogenerated return type of UpdateDatasetSdgs.
"""
type UpdateDatasetSdgsPayload {
  dataset: Dataset
  errors: [String!]
}

"""
Autogenerated return type of UpdateDatasetSectors.
"""
type UpdateDatasetSectorsPayload {
  dataset: Dataset
  errors: [String!]
}

"""
Autogenerated return type of UpdateDatasetTags.
"""
type UpdateDatasetTagsPayload {
  dataset: Dataset
  errors: [String!]
}

"""
Autogenerated return type of UpdateDescriptionEntity.
"""
type UpdateDescriptionEntityPayload {
  errors: [String!]
}

"""
Autogenerated return type of UpdateMessageVisibility.
"""
type UpdateMessageVisibilityPayload {
  errors: [String!]
  message: Message
}

"""
Autogenerated return type of UpdateOpportunityBuildingBlocks.
"""
type UpdateOpportunityBuildingBlocksPayload {
  errors: [String!]
  opportunity: Opportunity
}

"""
Autogenerated return type of UpdateOpportunityCountries.
"""
type UpdateOpportunityCountriesPayload {
  errors: [String!]
  opportunity: Opportunity
}

"""
Autogenerated return type of UpdateOpportunityOrganizations.
"""
type UpdateOpportunityOrganizationsPayload {
  errors: [String!]
  opportunity: Opportunity
}

"""
Autogenerated return type of UpdateOpportunitySectors.
"""
type UpdateOpportunitySectorsPayload {
  errors: [String!]
  opportunity: Opportunity
}

"""
Autogenerated return type of UpdateOpportunityTags.
"""
type UpdateOpportunityTagsPayload {
  errors: [String!]
  opportunity: Opportunity
}

"""
Autogenerated return type of UpdateOpportunityUseCases.
"""
type UpdateOpportunityUseCasesPayload {
  errors: [String!]
  opportunity: Opportunity
}

"""
Autogenerated return type of UpdateOrganizationBuildingBlocks.
"""
type UpdateOrganizationBuildingBlocksPayload {
  errors: [String!]
  organization: Organization
}

"""
Autogenerated return type of UpdateOrganizationCertifications.
"""
type UpdateOrganizationCertificationsPayload {
  errors: [String!]
  organization: Organization
}

"""
Autogenerated return type of UpdateOrganizationContacts.
"""
type UpdateOrganizationContactsPayload {
  errors: [String!]
  organization: Organization
}

"""
Autogenerated return type of UpdateOrganizationCountries.
"""
type UpdateOrganizationCountriesPayload {
  errors: [String!]
  organization: Organization
}

"""
Autogenerated return type of UpdateOrganizationOffices.
"""
type UpdateOrganizationOfficesPayload {
  errors: [String!]
  organization: Organization
}

"""
Autogenerated return type of UpdateOrganizationProducts.
"""
type UpdateOrganizationProductsPayload {
  errors: [String!]
  organization: Organization
}

"""
Autogenerated return type of UpdateOrganizationProjects.
"""
type UpdateOrganizationProjectsPayload {
  errors: [String!]
  organization: Organization
}

"""
Autogenerated return type of UpdateOrganizationResources.
"""
type UpdateOrganizationResourcesPayload {
  errors: [String!]
  organization: Organization
}

"""
Autogenerated return type of UpdateOrganizationSectors.
"""
type UpdateOrganizationSectorsPayload {
  errors: [String!]
  organization: Organization
}

"""
Autogenerated return type of UpdateOrganizationSpecialties.
"""
type UpdateOrganizationSpecialtiesPayload {
  errors: [String!]
  organization: Organization
}

"""
Autogenerated return type of UpdatePlayMoves.
"""
type UpdatePlayMovesPayload {
  errors: [String!]
  play: Play
}

"""
Autogenerated return type of UpdatePlaybookPlays.
"""
type UpdatePlaybookPlaysPayload {
  errors: [String!]
  playbook: Playbook
}

"""
Autogenerated return type of UpdateProductBuildingBlocks.
"""
type UpdateProductBuildingBlocksPayload {
  errors: [String!]
  product: Product
}

"""
Autogenerated return type of UpdateProductCategories.
"""
type UpdateProductCategoriesPayload {
  errors: [String!]
  product: Product
}

"""
Autogenerated return type of UpdateProductCountries.
"""
type UpdateProductCountriesPayload {
  errors: [String!]
  product: Product
}

"""
Autogenerated return type of UpdateProductExtraAttributes.
"""
type UpdateProductExtraAttributesPayload {
  errors: [String!]
  message: String
  product: Product
}

"""
Autogenerated return type of UpdateProductIndicators.
"""
type UpdateProductIndicatorsPayload {
  errors: [String!]
  product: Product
}

"""
Autogenerated return type of UpdateProductOrganizations.
"""
type UpdateProductOrganizationsPayload {
  errors: [String!]
  product: Product
}

"""
Autogenerated return type of UpdateProductProjects.
"""
type UpdateProductProjectsPayload {
  errors: [String!]
  product: Product
}

"""
Autogenerated return type of UpdateProductResources.
"""
type UpdateProductResourcesPayload {
  errors: [String!]
  product: Product
}

"""
Autogenerated return type of UpdateProductSdgs.
"""
type UpdateProductSdgsPayload {
  errors: [String!]
  product: Product
}

"""
Autogenerated return type of UpdateProductSectors.
"""
type UpdateProductSectorsPayload {
  errors: [String!]
  product: Product
}

"""
Autogenerated return type of UpdateProductStage.
"""
type UpdateProductStagePayload {
  errors: [String!]
  message: String
  product: Product
}

"""
Autogenerated return type of UpdateProductTags.
"""
type UpdateProductTagsPayload {
  errors: [String!]
  product: Product
}

"""
Autogenerated return type of UpdateProjectCountries.
"""
type UpdateProjectCountriesPayload {
  errors: [String!]
  project: Project
}

"""
Autogenerated return type of UpdateProjectOrganizations.
"""
type UpdateProjectOrganizationsPayload {
  errors: [String!]
  project: Project
}

"""
Autogenerated return type of UpdateProjectProducts.
"""
type UpdateProjectProductsPayload {
  errors: [String!]
  project: Project
}

"""
Autogenerated return type of UpdateProjectSdgs.
"""
type UpdateProjectSdgsPayload {
  errors: [String!]
  project: Project
}

"""
Autogenerated return type of UpdateProjectSectors.
"""
type UpdateProjectSectorsPayload {
  errors: [String!]
  project: Project
}

"""
Autogenerated return type of UpdateProjectTags.
"""
type UpdateProjectTagsPayload {
  errors: [String!]
  project: Project
}

"""
Autogenerated return type of UpdateRegionCountries.
"""
type UpdateRegionCountriesPayload {
  errors: [String!]
  region: Region
}

"""
Autogenerated return type of UpdateResourceBuildingBlocks.
"""
type UpdateResourceBuildingBlocksPayload {
  errors: [String!]
  resource: Resource
}

"""
Autogenerated return type of UpdateResourceCountries.
"""
type UpdateResourceCountriesPayload {
  errors: [String!]
  resource: Resource
}

"""
Autogenerated return type of UpdateResourceProducts.
"""
type UpdateResourceProductsPayload {
  errors: [String!]
  resource: Resource
}

"""
Autogenerated return type of UpdateResourceResourceTopics.
"""
type UpdateResourceResourceTopicsPayload {
  errors: [String!]
  resource: Resource
}

"""
Autogenerated return type of UpdateResourceTags.
"""
type UpdateResourceTagsPayload {
  errors: [String!]
  resource: Resource
}

"""
Autogenerated return type of UpdateResourceUseCases.
"""
type UpdateResourceUseCasesPayload {
  errors: [String!]
  resource: Resource
}

"""
Autogenerated return type of UpdateRubricCategoryIndicators.
"""
type UpdateRubricCategoryIndicatorsPayload {
  errors: [String!]
  rubricCategory: RubricCategory
}

"""
Autogenerated return type of UpdateSiteSettingCarouselConfiguration.
"""
type UpdateSiteSettingCarouselConfigurationPayload {
  errors: [String!]
  siteSetting: SiteSetting
}

"""
Autogenerated return type of UpdateSiteSettingCarouselConfigurations.
"""
type UpdateSiteSettingCarouselConfigurationsPayload {
  errors: [String!]
  siteSetting: SiteSetting
}

"""
Autogenerated return type of UpdateSiteSettingHeroCardConfiguration.
"""
type UpdateSiteSettingHeroCardConfigurationPayload {
  errors: [String!]
  siteSetting: SiteSetting
}

"""
Autogenerated return type of UpdateSiteSettingHeroCardSection.
"""
type UpdateSiteSettingHeroCardSectionPayload {
  errors: [String!]
  siteSetting: SiteSetting
}

"""
Autogenerated return type of UpdateSiteSettingItemSettings.
"""
type UpdateSiteSettingItemSettingsPayload {
  errors: [String!]
  siteSetting: SiteSetting
}

"""
Autogenerated return type of UpdateSiteSettingMenuConfiguration.
"""
type UpdateSiteSettingMenuConfigurationPayload {
  errors: [String!]
  siteSetting: SiteSetting
}

"""
Autogenerated return type of UpdateSiteSettingMenuConfigurations.
"""
type UpdateSiteSettingMenuConfigurationsPayload {
  errors: [String!]
  siteSetting: SiteSetting
}

"""
Autogenerated return type of UpdateSiteSettingSectionSettings.
"""
type UpdateSiteSettingSectionSettingsPayload {
  errors: [String!]
  siteSetting: SiteSetting
}

"""
Autogenerated return type of UpdateUseCaseSdgTargets.
"""
type UpdateUseCaseSdgTargetsPayload {
  errors: [String!]
  useCase: UseCase
}

"""
Autogenerated return type of UpdateUseCaseStepBuildingBlocks.
"""
type UpdateUseCaseStepBuildingBlocksPayload {
  errors: [String!]
  useCaseStep: UseCaseStep
}

"""
Autogenerated return type of UpdateUseCaseStepDatasets.
"""
type UpdateUseCaseStepDatasetsPayload {
  errors: [String!]
  useCaseStep: UseCaseStep
}

"""
Autogenerated return type of UpdateUseCaseStepProducts.
"""
type UpdateUseCaseStepProductsPayload {
  errors: [String!]
  useCaseStep: UseCaseStep
}

"""
Autogenerated return type of UpdateUseCaseStepWorkflows.
"""
type UpdateUseCaseStepWorkflowsPayload {
  errors: [String!]
  useCaseStep: UseCaseStep
}

"""
Autogenerated return type of UpdateUseCaseTags.
"""
type UpdateUseCaseTagsPayload {
  errors: [String!]
  useCase: UseCase
}

"""
Autogenerated return type of UpdateWorkflowBuildingBlocks.
"""
type UpdateWorkflowBuildingBlocksPayload {
  errors: [String!]
  workflow: Workflow
}

scalar Upload

type UseCase {
  buildingBlocks: [BuildingBlock!]
  govStackEntity: Boolean!
  id: ID!
  imageFile: String!
  markdownUrl: String
  maturity: String!
  name: String!
  parsedDescription: String
  sanitizedDescription: String!
  sdgTargets: [SustainableDevelopmentGoalTarget!]!
  sector: Sector
  slug: String!
  tags: JSON
  useCaseDescription: UseCaseDescription!
  useCaseDescriptions: [UseCaseDescription!]
  useCaseHeaders: [UseCaseHeader!]
  useCaseSteps: [UseCaseStep!]
  workflows: [Workflow!]
}

type UseCaseDescription {
  description: String!
  id: ID!
  locale: String!
  useCaseId: Int
}

type UseCaseHeader {
  header: String!
  id: ID!
  locale: String!
  useCaseId: Int
}

type UseCaseStep {
  buildingBlocks: [BuildingBlock!]
  datasets: [Dataset!]
  id: ID!
  name: String!
  parsedDescription: String
  products: [Product!]
  slug: String!
  stepNumber: Int!
  useCase: UseCase!
  useCaseStepDescription: UseCaseStepDescription
  useCaseStepDescriptions: [UseCaseStepDescription!]
  workflows: [Workflow!]!
}

type UseCaseStepDescription {
  description: String!
  id: ID!
  locale: String!
  useCaseId: Int
}

type User {
  allRoles: JSON
  authenticationToken: String!
  confirmationSentAt: ISO8601DateTime
  confirmationToken: String
  confirmed: Boolean
  confirmedAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
  email: String!
  encryptedPassword: String!
  expired: Boolean
  expiredAt: ISO8601DateTime
  id: ID!
  organization: Organization
  products: [Product!]
  receiveBackup: Boolean
  rememberCreatedAt: ISO8601DateTime
  resetPasswordSentAt: ISO8601DateTime
  resetPasswordToken: String
  roles: JSON!
  savedProducts: Int
  savedProjects: Int
  savedUrls: String
  savedUseCases: Int
  unconfirmedEmail: String
  updatedAt: ISO8601DateTime!
  username: String
}

type Wizard {
  digitalPrinciples: [DigitalPrinciple!]!
  playbooks: [Playbook!]!
  resources: [Resource!]!
}

type Workflow {
  buildingBlocks: [BuildingBlock!]!
  id: ID!
  imageFile: String!
  name: String!
  parsedDescription: String
  slug: String!
  useCaseSteps: [UseCaseStep!]!
  useCases: [UseCase!]!
  workflowDescription: WorkflowDescription
  workflowDescriptions: [WorkflowDescription!]!
}

type WorkflowDescription {
  description: String!
  id: ID!
  locale: String!
  useCaseId: Int
}

"""
Autogenerated return type of AddBookmark.
"""
type AddBookmarkPayload {
  bookmark: Bookmark
  errors: [String!]
}

"""
Autogenerated return type of ApplyAsContentEditor.
"""
type ApplyAsContentEditorPayload {
  candidateRole: CandidateRole
  errors: [String!]
}

"""
Autogenerated return type of ApplyAsOwner.
"""
type ApplyAsOwnerPayload {
  candidateRole: CandidateRole
  errors: [String!]
}

"""
Autogenerated return type of ApproveRejectCandidateDataset.
"""
type ApproveRejectCandidateDatasetPayload {
  candidateDataset: CandidateDataset
  errors: [String!]
}

"""
Autogenerated return type of ApproveRejectCandidateRole.
"""
type ApproveRejectCandidateRolePayload {
  candidateRole: CandidateRole
  errors: [String!]
}

type Author {
  email: String!
  id: ID!
  name: String!
  picture: String!
}

type Bookmark {
  bookmarkedBuildingBlocks: [BuildingBlock!]
  bookmarkedProducts: [Product!]
  bookmarkedUrls: [String!]
  bookmarkedUseCases: [UseCase!]
  id: ID!
}

type BuildingBlock {
  buildingBlockDescription: BuildingBlockDescription
  buildingBlockDescriptions: [BuildingBlockDescription!]
  category: String
  govStackEntity: Boolean!
  id: ID!
  imageFile: String
  maturity: String
  name: String!
  parsedDescription: String
  products: [Product!]
  slug: String!
  specUrl: String
  workflows: [Workflow!]
}

type BuildingBlockDescription {
  buildingBlockId: Int
  description: String!
  id: ID!
  locale: String!
}

type CandidateDataset {
  approvedBy: String
  approvedDate: ISO8601Date
  createdAt: ISO8601Date
  dataType: String!
  datasetType: String!
  description: String!
  id: ID!
  name: String!
  rejected: Boolean
  rejectedBy: String
  rejectedDate: ISO8601Date
  slug: String!
  submitterEmail: String!
  visualizationUrl: String
  website: String!
}

type CandidateOrganization {
  approvedBy: String
  approvedDate: ISO8601Date
  contact: Contact!
  contacts: [Contact!]!
  createStorefront: Boolean!
  createdAt: ISO8601Date
  description: String
  id: ID!
  name: String
  rejected: Boolean
  rejectedBy: String
  rejectedDate: ISO8601Date
  slug: String!
  website: String
}

type CandidateProduct {
  approvedBy: String
  approvedDate: ISO8601Date
  commercialProduct: Boolean!
  createdAt: ISO8601Date
  description: String
  id: ID!
  name: String!
  rejected: Boolean
  rejectedBy: String
  rejectedDate: ISO8601Date
  repository: String!
  slug: String!
  submitterEmail: String!
  website: String!
}

type CandidateRole {
  approvedBy: String
  approvedDate: ISO8601Date
  createdAt: ISO8601Date
  dataset: Dataset
  datasetId: String
  description: String
  email: String!
  id: ID!
  organization: Organization
  organizationId: String
  product: Product
  productId: String
  rejected: Boolean
  rejectedBy: String
  rejectedDate: ISO8601Date
  roles: [String!]
}

type Capability {
  aggregatorId: Int!
  capability: String!
  countryId: Int
  id: ID!
  operatorServiceId: Int!
  service: String!
}

type CategoryIndicator {
  categoryIndicatorDescription: CategoryIndicatorDescription
  categoryIndicatorDescriptions: [CategoryIndicatorDescription!]
  dataSource: String
  id: ID!
  indicatorType: String
  name: String!
  rubricCategory: RubricCategory
  rubricCategoryId: Int
  scriptName: String
  slug: String!
  sourceIndicator: String
  weight: Float!
}

type CategoryIndicatorDescription {
  categoryIndicatorId: Int
  description: String!
  id: ID!
  locale: String!
}

type City {
  id: ID!
  latitude: String!
  longitude: String!
  name: String!
  organizations: [Organization!]!
  province: Province
  slug: String!
}

type Comment {
  author: JSON
  avatarUrl: String!
  comId: String!
  commentId: String!
  commentObjectId: Int!
  commentObjectType: String!
  fullName: String!
  id: ID!
  parentCommentId: String
  replies: [Comment!]
  text: String
  userId: String!
}

type Contact {
  email: String!
  id: ID!
  mainContact: Boolean
  name: String!
  organizations: [Organization!]!
  slug: String!
  title: String
}

type Country {
  aliases: [String!]!
  code: String!
  codeLonger: String!
  id: ID!
  latitude: String!
  longitude: String!
  name: String!
  organizations: [Organization!]
  projects: [Project!]
  regions: [Region!]
  slug: String!
}

"""
Autogenerated return type of CreateBuildingBlock.
"""
type CreateBuildingBlockPayload {
  buildingBlock: BuildingBlock
  errors: [String!]
}

"""
Autogenerated return type of CreateCandidateDataset.
"""
type CreateCandidateDatasetPayload {
  candidateDataset: CandidateDataset
  errors: [String!]
}

"""
Autogenerated return type of CreateCandidateOrganization.
"""
type CreateCandidateOrganizationPayload {
  candidateOrganization: CandidateOrganization
  errors: [String!]
}

"""
Autogenerated return type of CreateCandidateProduct.
"""
type CreateCandidateProductPayload {
  candidateProduct: CandidateProduct
  errors: [String!]
}

"""
Autogenerated return type of CreateCategoryIndicator.
"""
type CreateCategoryIndicatorPayload {
  categoryIndicator: CategoryIndicator
  errors: [String!]
}

"""
Autogenerated return type of CreateCity.
"""
type CreateCityPayload {
  city: City
  errors: [String!]
}

"""
Autogenerated return type of CreateComment.
"""
type CreateCommentPayload {
  comment: Comment
  errors: [String!]
}

"""
Autogenerated return type of CreateContact.
"""
type CreateContactPayload {
  contact: Contact
  errors: [String!]
}

"""
Autogenerated return type of CreateCountry.
"""
type CreateCountryPayload {
  country: Country
  errors: [String!]
}

"""
Autogenerated return type of CreateDataset.
"""
type CreateDatasetPayload {
  dataset: Dataset
  errors: [String!]
}

"""
Autogenerated return type of CreateMove.
"""
type CreateMovePayload {
  errors: [String!]!
  move: Move
}

"""
Autogenerated return type of CreateMoveResource.
"""
type CreateMoveResourcePayload {
  errors: [String!]!
  move: Move
}

"""
Autogenerated return type of CreateOpportunity.
"""
type CreateOpportunityPayload {
  errors: [String!]
  opportunity: Opportunity
}

"""
Autogenerated return type of CreateOrganization.
"""
type CreateOrganizationPayload {
  errors: [String!]
  organization: Organization
}

"""
Autogenerated return type of CreatePlay.
"""
type CreatePlayPayload {
  errors: [String!]!
  play: Play
}

"""
Autogenerated return type of CreatePlaybook.
"""
type CreatePlaybookPayload {
  errors: [String!]
  playbook: Playbook
}

"""
Autogenerated return type of CreateProduct.
"""
type CreateProductPayload {
  errors: [String!]
  product: Product
}

"""
Autogenerated return type of CreateProductRepository.
"""
type CreateProductRepositoryPayload {
  errors: [String!]
  productRepository: ProductRepository
}

"""
Autogenerated return type of CreateProject.
"""
type CreateProjectPayload {
  errors: [String!]
  project: Project
}

"""
Autogenerated return type of CreateRegion.
"""
type CreateRegionPayload {
  errors: [String!]
  region: Region
}

"""
Autogenerated return type of CreateResource.
"""
type CreateResourcePayload {
  errors: [String!]
  resource: Resource
}

"""
Autogenerated return type of CreateRubricCategory.
"""
type CreateRubricCategoryPayload {
  errors: [String!]
  rubricCategory: RubricCategory
}

"""
Autogenerated return type of CreateSector.
"""
type CreateSectorPayload {
  errors: [String!]
  sector: Sector
}

"""
Autogenerated return type of CreateSpreadsheetData.
"""
type CreateSpreadsheetDataPayload {
  dialSpreadsheetData: DialSpreadsheetData
  errors: [String!]!
}

"""
Autogenerated return type of CreateStarredObject.
"""
type CreateStarredObjectPayload {
  errors: [String!]
  starredObject: StarredObject
}

"""
Autogenerated return type of CreateTag.
"""
type CreateTagPayload {
  errors: [String!]
  tag: Tag
}

"""
Autogenerated return type of CreateTaskTracker.
"""
type CreateTaskTrackerPayload {
  errors: [String!]
  taskTracker: TaskTracker
}

"""
Autogenerated return type of CreateUseCase.
"""
type CreateUseCasePayload {
  errors: [String!]
  useCase: UseCase
}

"""
Autogenerated return type of CreateUseCaseStep.
"""
type CreateUseCaseStepPayload {
  errors: [String!]
  useCaseStep: UseCaseStep
}

"""
Autogenerated return type of CreateUser.
"""
type CreateUserPayload {
  errors: [String!]
  user: User
}

"""
Autogenerated return type of CreateWizardGuidanceMail.
"""
type CreateWizardGuidanceMailPayload {
  response: String
}

"""
Autogenerated return type of CreateWorkflow.
"""
type CreateWorkflowPayload {
  errors: [String!]
  workflow: Workflow
}

type Dataset {
  aliases: JSON
  countries: [Country!]
  dataFormat: String
  datasetDescription: DatasetDescription
  datasetDescriptions: [DatasetDescription!]
  datasetType: String!
  geographicCoverage: String
  id: ID!
  imageFile: String!
  languages: String
  license: String
  manualUpdate: Boolean!
  name: String!
  organizations: [Organization!]
  origins: [Origin!]
  parsedDescription: String
  sdgs: [SustainableDevelopmentGoal!]
  sdgsMapping: String
  sectors: [Sector!]
  slug: String!
  sustainableDevelopmentGoalMapping: String
  sustainableDevelopmentGoals: [SustainableDevelopmentGoal!]
  tags: JSON
  timeRange: String
  visualizationUrl: String
  website: String
}

type DatasetDescription {
  datasetId: Int
  description: String!
  id: ID!
  locale: String!
}

"""
Autogenerated return type of DeleteBuildingBlock.
"""
type DeleteBuildingBlockPayload {
  buildingBlock: BuildingBlock
  errors: [String!]
}

"""
Autogenerated return type of DeleteCategoryIndicator.
"""
type DeleteCategoryIndicatorPayload {
  categoryIndicator: CategoryIndicator
  errors: [String!]
}

"""
Autogenerated return type of DeleteCity.
"""
type DeleteCityPayload {
  city: City
  errors: [String!]
}

"""
Autogenerated return type of DeleteComment.
"""
type DeleteCommentPayload {
  comment: Comment
  errors: [String!]
}

"""
Autogenerated return type of DeleteContact.
"""
type DeleteContactPayload {
  contact: Contact
  errors: [String!]
}

"""
Autogenerated return type of DeleteCountry.
"""
type DeleteCountryPayload {
  country: Country
  errors: [String!]
}

"""
Autogenerated return type of DeleteDataset.
"""
type DeleteDatasetPayload {
  dataset: Dataset
  errors: [String!]
}

"""
Autogenerated return type of DeleteOpportunity.
"""
type DeleteOpportunityPayload {
  errors: [String!]
  opportunity: Opportunity
}

"""
Autogenerated return type of DeleteOrganization.
"""
type DeleteOrganizationPayload {
  errors: [String!]
  organization: Organization
}

"""
Autogenerated return type of DeletePlayMove.
"""
type DeletePlayMovePayload {
  errors: [String!]
  play: Play
}

"""
Autogenerated return type of DeletePlaybook.
"""
type DeletePlaybookPayload {
  errors: [String!]
  playbook: Playbook
}

"""
Autogenerated return type of DeletePlaybookPlay.
"""
type DeletePlaybookPlayPayload {
  errors: [String!]
  playbook: Playbook
}

"""
Autogenerated return type of DeleteProduct.
"""
type DeleteProductPayload {
  errors: [String!]
  product: Product
}

"""
Autogenerated return type of DeleteProductRepository.
"""
type DeleteProductRepositoryPayload {
  errors: [String!]
  productRepository: ProductRepository
}

"""
Autogenerated return type of DeleteProject.
"""
type DeleteProjectPayload {
  errors: [String!]
  project: Project
}

"""
Autogenerated return type of DeleteRegion.
"""
type DeleteRegionPayload {
  errors: [String!]
  region: Region
}

"""
Autogenerated return type of DeleteResource.
"""
type DeleteResourcePayload {
  errors: [String!]
  resource: Resource
}

"""
Autogenerated return type of DeleteRubricCategory.
"""
type DeleteRubricCategoryPayload {
  errors: [String!]
  rubricCategory: RubricCategory
}

"""
Autogenerated return type of DeleteSector.
"""
type DeleteSectorPayload {
  errors: [String!]
  sector: Sector
}

"""
Autogenerated return type of DeleteSpreadsheetData.
"""
type DeleteSpreadsheetDataPayload {
  dialSpreadsheetData: DialSpreadsheetData
  errors: [String!]!
}

"""
Autogenerated return type of DeleteTag.
"""
type DeleteTagPayload {
  errors: [String!]
  tag: Tag
}

"""
Autogenerated return type of DeleteUseCase.
"""
type DeleteUseCasePayload {
  errors: [String!]
  useCase: UseCase
}

"""
Autogenerated return type of DeleteUser.
"""
type DeleteUserPayload {
  errors: [String!]
  user: User
}

"""
Autogenerated return type of DeleteWorkflow.
"""
type DeleteWorkflowPayload {
  errors: [String!]
  workflow: Workflow
}

type DialSpreadsheetData {
  id: ID!
  slug: String!
  spreadsheetData: JSON!
  spreadsheetType: String!
}

type DigitalPrinciple {
  id: ID!
  name: String!
  phase: String!
  slug: String!
  url: String!
}

"""
Autogenerated return type of DuplicatePlay.
"""
type DuplicatePlayPayload {
  errors: [String!]!
  play: Play
}

type Endorser {
  id: ID!
  name: String!
  slug: String!
}

type ExportedPdf {
  data: String!
  filename: String!
  locale: String!
}

type Handbook {
  createdAt: ISO8601DateTime!
  handbookDescriptions: [HandbookDescription!]
  handbookPages: [HandbookPage!]
  id: ID!
  imageFile: String
  maturity: String
  name: String!
  pdfUrl: String
  phases: JSON!
  slug: String!
  updatedAt: ISO8601DateTime!
}

type HandbookAnswer {
  action: String!
  answerText: String!
  id: ID!
  locale: String!
}

type HandbookDescription {
  audience: String!
  cover: String
  handbookId: Int
  id: ID!
  locale: String!
  outcomes: String!
  overview: String!
}

type HandbookPage {
  childPages: [HandbookPage!]
  handbookId: Int!
  handbookQuestion: HandbookQuestion
  id: ID!
  mediaUrl: String
  name: String!
  pageContents: [PageContent!]
  pageOrder: Int
  parentPageId: Int
  phase: String
  resources: JSON!
  slug: String!
}

type HandbookQuestion {
  handbookAnswers: [HandbookAnswer!]
  id: ID!
  locale: String!
  questionText: String!
}

type HandbookSearchPage {
  childPages: [HandbookSearchPage!]
  handbookId: Int!
  id: ID!
  name: String!
  parentPageId: Int
  resources: JSON!
  slug: String!
  snippet: String
}

"""
An ISO 8601-encoded date
"""
scalar ISO8601Date

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

"""
Represents untyped JSON
"""
scalar JSON

type Move {
  id: ID!
  moveDescription: MoveDescription
  moveDescriptions: [MoveDescription!]
  moveOrder: Int
  name: String!
  play: Play!
  playName: String
  playSlug: String
  resources: JSON!
  slug: String!
}

"""
The connection type for Move.
"""
type MoveConnection {
  """
  A list of edges.
  """
  edges: [MoveEdge]

  """
  A list of nodes.
  """
  nodes: [Move]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

type MoveDescription {
  description: String!
  id: ID!
  locale: String!
  moveId: Int
}

"""
An edge in a connection.
"""
type MoveEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Move
}

type Mutation {
  addBookmark(data: String!, type: String!): AddBookmarkPayload
  applyAsContentEditor: ApplyAsContentEditorPayload
  applyAsOwner(entity: String!, entityId: Int!): ApplyAsOwnerPayload
  approveRejectCandidateDataset(action: String!, slug: String!): ApproveRejectCandidateDatasetPayload
  approveRejectCandidateRole(action: String!, candidateRoleId: ID!): ApproveRejectCandidateRolePayload
  autoSaveMove(description: String!, moveSlug: String, name: String!, playSlug: String!, resources: JSON = []): CreateMovePayload
  autoSavePlay(buildingBlockSlugs: [String!], description: String!, name: String!, playbookSlug: String = null, productSlugs: [String!], slug: String!, tags: [String!] = []): CreatePlayPayload
  autoSavePlaybook(audience: String = "", author: String, cover: Upload, draft: Boolean! = true, name: String!, outcomes: String = "", overview: String!, slug: String!, tags: [String!] = []): CreatePlaybookPayload
  createBuildingBlock(category: String, description: String!, govStackEntity: Boolean = false, imageFile: Upload = null, maturity: String!, name: String!, slug: String!, specUrl: String = null): CreateBuildingBlockPayload
  createCandidateDataset(captcha: String!, datasetType: String!, description: String!, name: String!, slug: String!, submitterEmail: String!, visualizationUrl: String, website: String!): CreateCandidateDatasetPayload
  createCandidateOrganization(captcha: String!, createStorefront: Boolean!, description: String!, email: String!, name: String!, organizationName: String!, slug: String, title: String, website: String!): CreateCandidateOrganizationPayload
  createCandidateProduct(captcha: String!, commercialProduct: Boolean = false, description: String!, name: String!, repository: String, slug: String = "", submitterEmail: String!, website: String!): CreateCandidateProductPayload
  createCategoryIndicator(dataSource: String, description: String, indicatorType: String, name: String!, rubricCategorySlug: String, scriptName: String, slug: String!, weight: Float!): CreateCategoryIndicatorPayload
  createCity(cityName: String!, countryName: String!, provinceName: String!, slug: String): CreateCityPayload
  createComment(commentId: String, commentObjectId: Int!, commentObjectType: String!, parentCommentId: String, text: String!, userId: Int!): CreateCommentPayload
  createContact(email: String!, name: String!, slug: String!, title: String = null): CreateContactPayload
  createCountry(name: String!, slug: String): CreateCountryPayload
  createDataset(aliases: JSON, dataFormat: String, datasetType: String!, description: String!, geographicCoverage: String, imageFile: Upload, languages: String, license: String, name: String!, slug: String!, timeRange: String, visualizationUrl: String, website: String): CreateDatasetPayload
  createMove(description: String!, moveSlug: String, name: String!, playSlug: String!, resources: JSON = []): CreateMovePayload
  createMoveResource(description: String!, index: Int!, moveSlug: String, name: String!, playSlug: String!, url: String!): CreateMoveResourcePayload
  createOpportunity(closingDate: ISO8601Date!, contactEmail: String!, contactName: String!, description: String!, govStackEntity: Boolean = false, imageFile: Upload = null, name: String!, openingDate: ISO8601Date, opportunityOrigin: String!, opportunityStatus: String!, opportunityType: String!, slug: String!, webAddress: String): CreateOpportunityPayload
  createOrganization(aliases: JSON, description: String, endorserLevel: String, hasStorefront: Boolean, heroFile: Upload, imageFile: Upload, isEndorser: Boolean = false, isMni: Boolean, name: String!, slug: String!, website: String, whenEndorsed: ISO8601Date): CreateOrganizationPayload
  createPlay(buildingBlockSlugs: [String!], description: String!, name: String!, playbookSlug: String = null, productSlugs: [String!], slug: String!, tags: [String!] = []): CreatePlayPayload
  createPlaybook(audience: String = "", author: String, cover: Upload, draft: Boolean! = true, name: String!, outcomes: String = "", overview: String!, slug: String!, tags: [String!] = []): CreatePlaybookPayload
  createProduct(aliases: JSON, commercialProduct: Boolean = false, description: String!, govStackEntity: Boolean = false, hostingModel: String = null, imageFile: Upload, name: String!, pricingDetails: String = null, pricingModel: String = null, pricingUrl: String = null, slug: String!, website: String): CreateProductPayload
  createProductRepository(absoluteUrl: String!, description: String!, mainRepository: Boolean!, name: String!, productSlug: String!, slug: String!): CreateProductRepositoryPayload
  createProject(description: String!, endDate: ISO8601Date, name: String!, organizationId: Int, productId: Int, projectUrl: String, slug: String!, startDate: ISO8601Date): CreateProjectPayload
  createRegion(aliases: JSON = [], description: String!, name: String!, slug: String!): CreateRegionPayload
  createResource(authorEmail: String = null, authorName: String!, description: String = null, featured: Boolean, imageFile: Upload, imageUrl: String = null, linkDescription: String = null, name: String!, organizationSlug: String = null, phase: String = "", publishedDate: ISO8601Date!, resourceFile: Upload, resourceLink: String = null, resourceTopic: String = null, resourceType: String = null, showInExchange: Boolean, showInWizard: Boolean, slug: String!, source: String = null): CreateResourcePayload
  createRubricCategory(description: String!, name: String!, slug: String!, weight: Float!): CreateRubricCategoryPayload
  createSector(isDisplayable: Boolean!, locale: String = null, name: String!, originId: Int = null, parentSectorId: Int = null, slug: String!): CreateSectorPayload
  createSpreadsheetData(assoc: String = "", spreadsheetData: JSON = {}, spreadsheetType: String!): CreateSpreadsheetDataPayload
  createStarredObject(sourceObjectType: String!, sourceObjectValue: String!, starredObjectType: String!, starredObjectValue: String!): CreateStarredObjectPayload
  createTag(description: String, name: String!, slug: String!): CreateTagPayload
  createTaskTracker(description: String!, name: String!, slug: String!): CreateTaskTrackerPayload
  createUseCase(description: String!, govStackEntity: Boolean = false, imageFile: Upload = null, markdownUrl: String = null, maturity: String!, name: String!, sectorSlug: String!, slug: String!): CreateUseCasePayload
  createUseCaseStep(description: String = null, name: String!, slug: String = null, stepNumber: Int!, useCaseId: Int!): CreateUseCaseStepPayload
  createUser(confirmed: Boolean, email: String!, organizations: JSON! = [], products: JSON = [], roles: JSON = [], username: String!): CreateUserPayload
  createWizardGuidanceMail(emailAddress: String!, message: String!, name: String!): CreateWizardGuidanceMailPayload
  createWorkflow(description: String!, imageFile: Upload, name: String!, slug: String!): CreateWorkflowPayload
  deleteBuildingBlock(id: ID!): DeleteBuildingBlockPayload
  deleteCategoryIndicator(id: ID!): DeleteCategoryIndicatorPayload
  deleteCity(id: ID!): DeleteCityPayload
  deleteComment(commentId: String!): DeleteCommentPayload
  deleteContact(id: ID!): DeleteContactPayload
  deleteCountry(id: ID!): DeleteCountryPayload
  deleteDataset(id: ID!): DeleteDatasetPayload
  deleteOpportunity(id: ID!): DeleteOpportunityPayload
  deleteOrganization(id: ID!): DeleteOrganizationPayload
  deletePlayMove(moveSlug: String!, playSlug: String!): DeletePlayMovePayload
  deletePlaybook(id: ID!): DeletePlaybookPayload
  deletePlaybookPlay(playSlug: String!, playbookSlug: String!): DeletePlaybookPlayPayload
  deleteProduct(id: ID!): DeleteProductPayload
  deleteProductRepository(id: ID!): DeleteProductRepositoryPayload
  deleteProject(id: ID!): DeleteProjectPayload
  deleteRegion(id: ID!): DeleteRegionPayload
  deleteResource(id: ID!): DeleteResourcePayload
  deleteRubricCategory(id: ID!): DeleteRubricCategoryPayload
  deleteSector(id: ID!): DeleteSectorPayload
  deleteSpreadsheetData(assoc: String = "", spreadsheetData: JSON = {}, spreadsheetType: String!): DeleteSpreadsheetDataPayload
  deleteTag(id: ID!): DeleteTagPayload
  deleteUseCase(id: ID!): DeleteUseCasePayload
  deleteUser(id: ID!): DeleteUserPayload
  deleteWorkflow(id: ID!): DeleteWorkflowPayload
  duplicatePlay(playSlug: String!): DuplicatePlayPayload
  removeBookmark(data: String!, type: String!): RemoveBookmarkPayload
  removeStarredObject(sourceObjectType: String!, sourceObjectValue: String!, starredObjectType: String!, starredObjectValue: String!): RemoveStarredObjectPayload
  updateBuildingBlockProducts(mappingStatus: String!, productSlugs: [String!]!, slug: String!): UpdateBuildingBlockProductsPayload
  updateBuildingBlockWorkflows(slug: String!, workflowSlugs: [String!]!): UpdateBuildingBlockWorkflowsPayload
  updateDatasetCountries(countrySlugs: [String!]!, slug: String!): UpdateDatasetCountriesPayload
  updateDatasetOrganizations(organizationSlugs: [String!]!, slug: String!): UpdateDatasetOrganizationsPayload
  updateDatasetSdgs(mappingStatus: String!, sdgSlugs: [String!]!, slug: String!): UpdateDatasetSdgsPayload
  updateDatasetSectors(sectorSlugs: [String!]!, slug: String!): UpdateDatasetSectorsPayload
  updateDatasetTags(slug: String!, tagNames: [String!]!): UpdateDatasetTagsPayload
  updateOpportunityBuildingBlocks(buildingBlockSlugs: [String!]!, slug: String!): UpdateOpportunityBuildingBlocksPayload
  updateOpportunityCountries(countrySlugs: [String!]!, slug: String!): UpdateOpportunityCountriesPayload
  updateOpportunityOrganizations(organizationSlugs: [String!]!, slug: String!): UpdateOpportunityOrganizationsPayload
  updateOpportunitySectors(sectorSlugs: [String!]!, slug: String!): UpdateOpportunitySectorsPayload
  updateOpportunityTags(slug: String!, tagNames: [String!]!): UpdateOpportunityTagsPayload
  updateOpportunityUseCases(slug: String!, useCaseSlugs: [String!]!): UpdateOpportunityUseCasesPayload
  updateOrganizationBuildingBlocks(buildingBlockSlugs: [String!]!, slug: String!): UpdateOrganizationBuildingBlocksPayload
  updateOrganizationCertifications(productSlugs: [String!]!, slug: String!): UpdateOrganizationCertificationsPayload
  updateOrganizationContacts(contacts: JSON!, slug: String!): UpdateOrganizationContactsPayload
  updateOrganizationCountries(countrySlugs: [String!]!, slug: String!): UpdateOrganizationCountriesPayload
  updateOrganizationOffices(offices: [JSON!]!, slug: String!): UpdateOrganizationOfficesPayload
  updateOrganizationProducts(productSlugs: [String!]!, slug: String!): UpdateOrganizationProductsPayload
  updateOrganizationProjects(projectSlugs: [String!]!, slug: String!): UpdateOrganizationProjectsPayload
  updateOrganizationResources(resourceSlugs: [String!]!, slug: String!): UpdateOrganizationResourcesPayload
  updateOrganizationSectors(sectorSlugs: [String!]!, slug: String!): UpdateOrganizationSectorsPayload
  updateOrganizationSpecialties(slug: String!, specialties: [String!]!): UpdateOrganizationSpecialtiesPayload
  updatePlayMoves(moveSlugs: [String!]!, slug: String!): UpdatePlayMovesPayload
  updatePlaybookPlays(playSlugs: [String!]!, slug: String!): UpdatePlaybookPlaysPayload
  updateProductBuildingBlocks(buildingBlockSlugs: [String!]!, mappingStatus: String, slug: String!): UpdateProductBuildingBlocksPayload
  updateProductCountries(countrySlugs: [String!]!, slug: String!): UpdateProductCountriesPayload
  updateProductIndicators(indicatorsData: [JSON!]!, slug: String!): UpdateProductIndicatorsPayload
  updateProductOrganizations(organizationSlugs: [String!]!, slug: String!): UpdateProductOrganizationsPayload
  updateProductProjects(projectSlugs: [String!]!, slug: String!): UpdateProductProjectsPayload
  updateProductResources(resourceSlugs: [String!]!, slug: String!): UpdateProductResourcesPayload
  updateProductSdgs(mappingStatus: String!, sdgSlugs: [String!]!, slug: String!): UpdateProductSdgsPayload
  updateProductSectors(sectorSlugs: [String!]!, slug: String!): UpdateProductSectorsPayload
  updateProductTags(slug: String!, tagNames: [String!]!): UpdateProductTagsPayload
  updateProjectCountries(countrySlugs: [String!]!, slug: String!): UpdateProjectCountriesPayload
  updateProjectOrganizations(organizationSlugs: [String!]!, slug: String!): UpdateProjectOrganizationsPayload
  updateProjectProducts(productSlugs: [String!]!, slug: String!): UpdateProjectProductsPayload
  updateProjectSdgs(sdgSlugs: [String!]!, slug: String!): UpdateProjectSdgsPayload
  updateProjectSectors(sectorSlugs: [String!]!, slug: String!): UpdateProjectSectorsPayload
  updateProjectTags(slug: String!, tagNames: [String!]!): UpdateProjectTagsPayload
  updateRegionCountries(countrySlugs: [String!]!, slug: String!): UpdateRegionCountriesPayload
  updateResourceCountries(countrySlugs: [String!]!, slug: String!): UpdateResourceCountriesPayload
  updateResourceProducts(productSlugs: [String!]!, slug: String!): UpdateResourceProductsPayload
  updateResourceTags(slug: String!, tagNames: [String!]!): UpdateResourceTagsPayload
  updateRubricCategoryIndicators(categoryIndicatorSlugs: [String!]!, rubricCategorySlug: String!): UpdateRubricCategoryIndicatorsPayload
  updateUseCaseSdgTargets(sdgTargetIds: [Int!]!, slug: String!): UpdateUseCaseSdgTargetsPayload
  updateUseCaseStepBuildingBlocks(buildingBlockSlugs: [String!]!, slug: String!): UpdateUseCaseStepBuildingBlocksPayload
  updateUseCaseStepDatasets(datasetSlugs: [String!]!, slug: String!): UpdateUseCaseStepDatasetsPayload
  updateUseCaseStepProducts(productSlugs: [String!]!, slug: String!): UpdateUseCaseStepProductsPayload
  updateUseCaseStepWorkflows(slug: String!, workflowSlugs: [String!]!): UpdateUseCaseStepWorkflowsPayload
  updateUseCaseTags(slug: String!, tagNames: [String!]!): UpdateUseCaseTagsPayload
  updateWorkflowBuildingBlocks(buildingBlockSlugs: [String!]!, slug: String!): UpdateWorkflowBuildingBlocksPayload
}

type Office {
  city: String!
  cityData: City
  country: Country!
  id: ID!
  latitude: String!
  longitude: String!
  name: String!
  organization: Organization!
  province: Province!
  slug: String!
}

"""
Input attributes for pagination
"""
input OffsetAttributes {
  limit: Int
  offset: Int!
}

type OperatorService {
  countryId: Int
  id: ID!
  name: String!
  service: String!
}

type Opportunity {
  buildingBlocks: [BuildingBlock!]!
  closingDate: ISO8601Date
  contactEmail: String
  contactName: String
  countries: [Country!]!
  description: String!
  govStackEntity: Boolean!
  id: ID!
  imageFile: String
  name: String!
  openingDate: ISO8601Date
  opportunityStatus: String!
  opportunityType: String!
  organizations: [Organization!]!
  origin: Origin!
  parsedDescription: String
  requirements: String
  sectors: [Sector!]!
  slug: String!
  tags: JSON!
  useCases: [UseCase!]!
  webAddress: String
}

type Organization {
  aliases: JSON
  buildingBlockCertifications: [BuildingBlock!]!
  buildingBlocks: [String!]!
  certifications: [String!]!
  contacts: [Contact!]!
  countries: [Country!]!
  endorserLevel: String
  hasStorefront: Boolean
  haveOwner: Boolean!
  heroFile: String
  id: ID!
  imageFile: String
  isEndorser: Boolean
  isMni: Boolean
  name: String!
  offices: [Office!]!
  organizationDescription: OrganizationDescription
  organizationDescriptions: [OrganizationDescription!]!
  parsedDescription: String
  productCertifications: [Product!]!
  products: [Product!]!
  projects: [Project!]!
  resources: [Resource!]!
  sectors: [Sector!]!
  slug: String!
  specialties: [String!]!
  starredProjects: [Project!]!
  website: String
  whenEndorsed: ISO8601Date
}

"""
The connection type for Organization.
"""
type OrganizationConnection {
  """
  A list of edges.
  """
  edges: [OrganizationEdge]

  """
  A list of nodes.
  """
  nodes: [Organization]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

type OrganizationDescription {
  description: String!
  id: ID!
  locale: String!
  organizationId: Int
}

"""
An edge in a connection.
"""
type OrganizationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Organization
}

type Origin {
  id: ID!
  name: String
  slug: String!
}

type PageContent {
  assets: String
  components: String
  css: String
  editorType: String
  handbookPageId: Int
  html: String!
  id: ID!
  locale: String!
  styles: String
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

"""
Output attributes for pagination
"""
type PaginationAttributes {
  totalCount: Int!
}

type Play {
  buildingBlocks: [BuildingBlock!]
  createdAt: ISO8601DateTime!
  id: ID!
  imageFile: String
  maturity: String
  name: String!
  playDescription: PlayDescription
  playDescriptions: [PlayDescription!]
  playMoves: [Move!]
  products: [Product!]
  slug: String!
  tags: JSON!
  updatedAt: ISO8601DateTime!
}

"""
The connection type for Play.
"""
type PlayConnection {
  """
  A list of edges.
  """
  edges: [PlayEdge]

  """
  A list of nodes.
  """
  nodes: [Play]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

type PlayDescription {
  description: String!
  id: ID!
  locale: String!
  playId: Int
}

"""
An edge in a connection.
"""
type PlayEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Play
}

type Playbook {
  author: String
  createdAt: ISO8601DateTime!
  draft: Boolean!
  id: ID!
  imageFile: String
  maturity: String
  name: String!
  phases: JSON!
  playbookDescription: PlaybookDescription
  playbookDescriptions: [PlaybookDescription!]
  playbookPlays: [PlaybookPlay!]
  plays: [Play!]
  slug: String!
  tags: JSON!
  updatedAt: ISO8601DateTime!
}

type PlaybookDescription {
  audience: String!
  cover: String
  id: ID!
  locale: String!
  outcomes: String!
  overview: String!
  playbookId: Int
  sanitizedOverview: String!
}

type PlaybookPlay {
  id: ID!
  playName: String
  playOrder: Int
  playSlug: String
  playbookSlug: String
}

type Product {
  aliases: JSON
  buildingBlocks: [BuildingBlock!]
  buildingBlocksMappingStatus: String
  commercialProduct: Boolean!
  countries: [Country!]
  currentProjects(first: Int): [Project!]
  endorsers: [Endorser!]
  extraAttributes: JSON
  govStackEntity: Boolean!
  haveOwner: Boolean!
  hostingModel: String
  id: ID!
  imageFile: String!
  includes: [Product!]
  interoperatesWith: [Product!]
  isLaunchable: Boolean
  isLinkedWithDpi: Boolean!
  languages: JSON
  mainRepository: ProductRepository
  manualUpdate: Boolean!
  maturityScoreDetails: JSON
  name: String!
  notAssignedCategoryIndicators: [CategoryIndicator!]
  organizations: [Organization!]
  origins: [Origin!]
  overallMaturityScore: Float
  owner: String
  parsedDescription: String
  playbooks: [Playbook!]
  pricingDetails: String
  pricingModel: String
  productDescription: ProductDescription
  productDescriptions: [ProductDescription!]
  productIndicators: [ProductIndicator!]
  productType: String!
  projects: [Project!]
  resources: [Resource!]
  sdgs: [SustainableDevelopmentGoal!]
  sdgsMappingStatus: String
  sectors: [Sector!]
  slug: String!
  sustainableDevelopmentGoals: [SustainableDevelopmentGoal!]
  sustainableDevelopmentGoalsMappingStatus: String
  tags: JSON
  website: String
}

type ProductDescription {
  description: String!
  id: ID!
  locale: String!
  productId: Int
}

type ProductIndicator {
  categoryIndicator: CategoryIndicator!
  categoryIndicatorId: ID!
  id: ID!
  indicatorValue: String!
  productId: ID!
}

type ProductRepository {
  absoluteUrl: String!
  description: String!
  id: ID!
  languageData: JSON
  license: String
  mainRepository: String!
  name: String
  product: Product
  slug: String!
  statisticalData: JSON
}

type Project {
  countries: [Country!]
  endDate: ISO8601Date
  id: ID!
  name: String!
  organizations: [Organization!]
  origin: Origin
  parsedDescription: String
  products: [Product!]
  projectDescription: ProjectDescription
  projectDescriptions: [ProjectDescription!]
  projectWebsite: String
  sdgs: [SustainableDevelopmentGoal!]
  sectors: [Sector!]
  slug: String!
  startDate: ISO8601Date
  sustainableDevelopmentGoals: [SustainableDevelopmentGoal!]
  tags: JSON
}

"""
The connection type for Project.
"""
type ProjectConnection {
  """
  A list of edges.
  """
  edges: [ProjectEdge]

  """
  A list of nodes.
  """
  nodes: [Project]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

type ProjectDescription {
  description: String!
  id: ID!
  locale: String!
  projectId: Int
}

"""
An edge in a connection.
"""
type ProjectEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Project
}

type Province {
  country: Country!
  id: ID!
  latitude: String!
  longitude: String!
  name: String!
  slug: String!
}

type Query {
  aggregator(slug: String!): Organization
  aggregators(search: String = ""): [Organization!]!
  bookmark(id: ID!): Bookmark
  buildingBlock(slug: String!): BuildingBlock
  buildingBlocks(search: String = ""): [BuildingBlock!]!
  candidateDataset(slug: String!): CandidateDataset
  candidateDatasets(search: String = ""): [CandidateDataset!]!
  candidateOrganization(slug: String!): CandidateOrganization
  candidateOrganizations(search: String = ""): [CandidateOrganization!]!
  candidateProduct(slug: String!): CandidateProduct
  candidateProducts(search: String = ""): [CandidateProduct!]!
  candidateRole(datasetId: String = null, email: String = null, id: ID = null, organizationId: String = null, productId: String = null): CandidateRole
  candidateRoles(datasetId: String = null, organizationId: String = null, productId: String = null): [CandidateRole!]!
  capabilities(aggregatorIds: [Int!] = [], capabilities: [String!] = [], countryIds: [Int!] = [], search: String = "", services: [String!] = []): [Capability!]!
  capabilityOnly(search: String = ""): [Capability!]!
  categoryIndicator(slug: String!): CategoryIndicator
  categoryIndicators(search: String = ""): [CategoryIndicator!]!
  cities(search: String = ""): [City!]!
  city(slug: String!): City
  comments(commentObjectId: Int!, commentObjectType: String!): [Comment!]!
  compareProducts(slugs: [String!]!): JSON!
  contact(slug: String!): Contact
  contacts(search: String = ""): [Contact!]!
  countComments(commentObjectId: Int!, commentObjectType: String!): Int!
  countries(search: String = ""): [Country!]!
  countriesWithResources(search: String = ""): [Country!]!
  country(slug: String!): Country
  dataset(slug: String!): Dataset
  datasets(search: String = ""): [Dataset!]!
  endorsers(search: String = ""): [Endorser!]!
  exportPageContents(locale: String = "en", pageIds: [Int!]!): ExportedPdf!
  handbook(slug: String!): Handbook!
  handbooks: [Handbook!]!
  me: User!
  move(playSlug: String!, slug: String!): Move
  moves(search: String = ""): [Move!]!
  operatorServiceOnly(search: String = ""): [OperatorService!]!
  operatorServices(operatorIds: [Int!] = [], operators: [String!] = [], search: String = ""): [OperatorService!]!
  opportunities(search: String = ""): [Opportunity!]!
  opportunity(slug: String!): Opportunity
  organization(slug: String!): Organization
  organizations(aggregatorOnly: Boolean = false, search: String = ""): [Organization!]!
  origins(search: String!): [Origin!]!
  ownedDatasets: [Dataset!]!
  ownedProducts: [Product!]!
  owners(captcha: String!, slug: String!, type: String!): [User!]!
  pageContents(handbookPageId: ID!, locale: String = "en"): PageContent!
  paginatedBuildingBlocks(categoryTypes: [String!] = [], filterBlocks: [String!] = [], offsetAttributes: OffsetAttributes!, sdgs: [String!] = [], search: String = "", showGovStackOnly: Boolean = false, showMature: Boolean = false, useCases: [String!] = [], workflows: [String!] = []): [BuildingBlock!]!
  paginatedCandidateDatasets(offsetAttributes: OffsetAttributes!, search: String = ""): [CandidateDataset!]!
  paginatedCandidateOrganizations(offsetAttributes: OffsetAttributes!, search: String = ""): [CandidateOrganization!]!
  paginatedCandidateProducts(offsetAttributes: OffsetAttributes!, search: String = ""): [CandidateProduct!]!
  paginatedCandidateRoles(offsetAttributes: OffsetAttributes!, search: String = ""): [CandidateRole!]!
  paginatedCities(offsetAttributes: OffsetAttributes!, search: String = ""): [City!]!
  paginatedContacts(offsetAttributes: OffsetAttributes!, search: String = ""): [Contact!]!
  paginatedCountries(offsetAttributes: OffsetAttributes!, search: String = ""): [Country!]!
  paginatedDatasets(countries: [String!] = [], datasetTypes: [String!] = [], offsetAttributes: OffsetAttributes!, origins: [String!] = [], sdgs: [String!] = [], search: String = "", sectors: [String!] = [], tags: [String!] = []): [Dataset!]!
  paginatedOpportunities(buildingBlocks: [String!] = [], countries: [String!] = [], offsetAttributes: OffsetAttributes!, organizations: [String!] = [], search: String = "", sectors: [String!] = [], showClosed: Boolean = false, showGovStackOnly: Boolean = false, tags: [String!] = [], useCases: [String!] = []): [Opportunity!]!
  paginatedOrganizations(aggregatorOnly: Boolean = false, countries: [String!] = [], endorserOnly: Boolean = false, offsetAttributes: OffsetAttributes!, search: String = "", sectors: [String!] = [], years: [Int!] = []): [Organization!]!
  paginatedPlaybooks(offsetAttributes: OffsetAttributes!, search: String = "", tags: [String!] = []): [Playbook!]!
  paginatedProducts(buildingBlocks: [String!] = [], countries: [String!] = [], isLinkedWithDpi: Boolean = false, licenseTypes: [String!] = [], offsetAttributes: OffsetAttributes!, origins: [String!] = [], sdgs: [String!] = [], search: String = "", sectors: [String!] = [], showGovStackOnly: Boolean = false, tags: [String!] = [], useCases: [String!] = [], workflows: [String!] = []): [Product!]!
  paginatedProjects(countries: [String!] = [], offsetAttributes: OffsetAttributes!, organizations: [String!] = [], origins: [String!] = [], products: [String!] = [], sdgs: [String!] = [], search: String = "", sectors: [String!] = [], tags: [String!] = []): [Project!]!
  paginatedRegions(offsetAttributes: OffsetAttributes!, search: String = ""): [Region!]!
  paginatedResources(compartmentalized: Boolean! = false, countries: [String!] = [], featuredLength: Int = 3, featuredOnly: Boolean = false, offsetAttributes: OffsetAttributes!, resourceTopics: [String!] = [], resourceTypes: [String!] = [], search: String = "", showInExchange: Boolean = false, showInWizard: Boolean = false, tags: [String!] = []): [Resource!]!
  paginatedSectors(offsetAttributes: OffsetAttributes!, search: String = ""): [Sector!]!
  paginatedStorefronts(buildingBlocks: [String!] = [], certifications: [String!] = [], countries: [String!] = [], offsetAttributes: OffsetAttributes!, search: String = "", sectors: [String!] = [], specialties: [String!] = []): [Organization!]!
  paginatedTags(offsetAttributes: OffsetAttributes!, search: String = ""): [Tag!]!
  paginatedTaskTrackers(offsetAttributes: OffsetAttributes!, search: String = "", showFailedOnly: Boolean = false): [TaskTracker!]!
  paginatedUseCases(offsetAttributes: OffsetAttributes!, sdgs: [String!] = [], search: String = "", showBeta: Boolean = false, showGovStackOnly: Boolean = false): [UseCase!]!
  paginatedUsers(offsetAttributes: OffsetAttributes!, search: String = ""): [User!]!
  paginatedWizardUseCases(buildingBlocks: [String!] = [], offsetAttributes: OffsetAttributes!, sdgs: [String!] = [], sectors: [String!] = [], useCases: [String!] = []): [UseCase!]!
  paginatedWorkflows(offsetAttributes: OffsetAttributes!, sdgs: [String!] = [], search: String = "", useCases: [String!] = []): [Workflow!]!
  paginationAttributeBuildingBlock(categoryTypes: [String!] = [], filterBlocks: [String!] = [], sdgs: [String!] = [], search: String = "", showGovStackOnly: Boolean = false, showMature: Boolean = false, useCases: [String!] = [], workflows: [String!] = []): PaginationAttributes!
  paginationAttributeCandidateDataset(search: String = ""): PaginationAttributes!
  paginationAttributeCandidateOrganization(search: String = ""): PaginationAttributes!
  paginationAttributeCandidateProduct(search: String = ""): PaginationAttributes!
  paginationAttributeCandidateRole(search: String = ""): PaginationAttributes!
  paginationAttributeCity(search: String = ""): PaginationAttributes!
  paginationAttributeContact(search: String = ""): PaginationAttributes!
  paginationAttributeCountry(search: String = ""): PaginationAttributes!
  paginationAttributeDataset(countries: [String!] = [], datasetTypes: [String!] = [], origins: [String!] = [], sdgs: [String!] = [], search: String = "", sectors: [String!] = [], tags: [String!] = []): PaginationAttributes!
  paginationAttributeOpportunity(buildingBlocks: [String!] = [], countries: [String!] = [], organizations: [String!] = [], search: String = "", sectors: [String!] = [], showClosed: Boolean = false, showGovStackOnly: Boolean = false, tags: [String!] = [], useCases: [String!] = []): PaginationAttributes!
  paginationAttributeOrganization(aggregatorOnly: Boolean = false, countries: [String!] = [], endorserOnly: Boolean = false, search: String = "", sectors: [String!] = [], years: [Int!] = []): PaginationAttributes!
  paginationAttributePlaybook(search: String = "", tags: [String!] = []): PaginationAttributes!
  paginationAttributeProduct(buildingBlocks: [String!] = [], countries: [String!] = [], isLinkedWithDpi: Boolean = false, licenseTypes: [String!] = [], origins: [String!] = [], sdgs: [String!] = [], search: String = "", sectors: [String!] = [], showGovStackOnly: Boolean = false, tags: [String!] = [], useCases: [String!] = [], workflows: [String!] = []): PaginationAttributes!
  paginationAttributeProject(countries: [String!] = [], organizations: [String!] = [], origins: [String!] = [], products: [String!] = [], sdgs: [String!] = [], search: String = "", sectors: [String!] = [], tags: [String!] = []): PaginationAttributes!
  paginationAttributeRegion(search: String = ""): PaginationAttributes!
  paginationAttributeResource(compartmentalized: Boolean! = false, countries: [String!] = [], featuredLength: Int = 3, resourceTopics: [String!] = [], resourceTypes: [String!] = [], search: String = "", showInExchange: Boolean = false, showInWizard: Boolean = false, tags: [String!] = []): PaginationAttributes!
  paginationAttributeSector(search: String = ""): PaginationAttributes!
  paginationAttributeStorefront(buildingBlocks: [String!] = [], certifications: [String!] = [], countries: [String!] = [], search: String = "", sectors: [String!] = [], specialties: [String!] = []): PaginationAttributes!
  paginationAttributeTag(search: String = ""): PaginationAttributes!
  paginationAttributeTaskTracker(search: String = "", showFailedOnly: Boolean = false): PaginationAttributes!
  paginationAttributeUseCase(sdgs: [String!] = [], search: String = "", showBeta: Boolean = false, showGovStackOnly: Boolean = false): PaginationAttributes!
  paginationAttributeUser(search: String = ""): PaginationAttributes!
  paginationAttributeWorkflow(sdgs: [String!] = [], search: String = "", useCases: [String!] = []): PaginationAttributes!
  paginationWizardAttributeUseCase(buildingBlocks: [String!] = [], sdgs: [String!] = [], sectors: [String!] = [], useCases: [String!] = []): PaginationAttributes!
  play(slug: String!): Play
  playbook(slug: String!): Playbook
  playbooks(search: String = ""): [Playbook!]!
  plays(playbookSlug: String = "", search: String = ""): [Play!]!
  product(slug: String!): Product
  productRepositories(slug: String!): [ProductRepository!]!
  productRepository(productSlug: String = "", slug: String!): ProductRepository
  products(search: String = ""): [Product!]!
  project(slug: String!): Project
  projects(search: String = ""): [Project!]!
  region(slug: String!): Region
  regions(search: String = ""): [Region!]!
  resource(slug: String!): Resource
  resources(search: String = ""): [Resource!]!
  rubricCategories(search: String): [RubricCategory!]!
  rubricCategory(slug: String!): RubricCategory!
  sdg(slug: String!): SustainableDevelopmentGoal
  sdgTargets(search: String = ""): [SustainableDevelopmentGoalTarget!]!
  sdgs(search: String = ""): [SustainableDevelopmentGoal!]!
  searchHandbook(search: String!, slug: String!): [HandbookSearchPage!]!
  searchMoves(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    search: String = ""
  ): MoveConnection!
  searchOrganizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String
    aggregatorOnly: Boolean = false
    aggregators: [String!] = []

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    countries: [String!] = []
    endorserLevel: String = ""
    endorserOnly: Boolean = false

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    search: String = ""
    sectors: [String!] = []
    years: [Int!] = []
  ): OrganizationConnection!
  searchPlaybookPlays(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    slug: String!
  ): PlayConnection!
  searchPlaybookTags(search: String = ""): [Tag!]!
  searchPlays(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    products: [String!] = []
    search: String = ""
  ): PlayConnection!
  searchProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    products: [String!] = []
    search: String = ""
    sectors: [String!] = []
    tags: [String!] = []
  ): ProjectConnection!
  sector(slug: String!): Sector
  sectors(locale: String = "en", search: String = ""): [Sector!]!
  spreadsheetDataset: [DialSpreadsheetData!]!
  spreadsheetProduct: [DialSpreadsheetData!]!
  starredObject(sourceObjectType: String!, sourceObjectValue: String!, starredObjectType: String!, starredObjectValue: String!): StarredObject
  starredObjects(sourceObjectType: String!, sourceObjectValue: String!): [StarredObject!]!
  tag(slug: String!): Tag
  tags(search: String = ""): [Tag!]!
  taskTracker(slug: String!): TaskTracker
  taskTrackers(search: String = ""): [TaskTracker!]!
  useCase(slug: String!): UseCase
  useCaseStep(slug: String!): UseCaseStep
  useCaseSteps(slug: String!): [UseCaseStep!]!
  useCases(mature: Boolean = false, search: String = ""): [UseCase!]!
  useCasesForSector(sectorSlugs: [String!]!): [UseCase!]!
  useCasesSteps(search: String = ""): [UseCaseStep!]!
  user(userId: String!): User
  userAuthenticationTokenCheck(userAuthenticationToken: String!, userId: Int!): Boolean
  userEmailCheck(email: String!): Boolean
  userRoles: JSON
  users(search: String = ""): [User!]!
  wizard: Wizard!
  workflow(slug: String!): Workflow
  workflows(search: String = ""): [Workflow!]!
}

type Region {
  aliases: JSON
  countries: [Country!]
  description: String!
  id: ID!
  name: String!
  slug: String!
}

"""
Autogenerated return type of RemoveBookmark.
"""
type RemoveBookmarkPayload {
  bookmark: Bookmark
  errors: [String!]
}

"""
Autogenerated return type of RemoveStarredObject.
"""
type RemoveStarredObjectPayload {
  errors: [String!]
  starredObject: StarredObject
}

type Resource {
  authors: [Author!]!
  countries: [Country!]!
  description: String
  featured: Boolean!
  id: ID!
  imageFile: String!
  imageUrl: String
  linkDescription: String
  name: String!
  organizations: [Organization!]!
  parsedDescription: String
  phase: String!
  products: [Product!]!
  publishedDate: ISO8601Date
  resourceFile: String
  resourceLink: String
  resourceTopic: String
  resourceType: String
  showInExchange: Boolean!
  showInWizard: Boolean!
  slug: String!
  source: String
  tags: JSON!
}

type RubricCategory {
  categoryIndicators: [CategoryIndicator!]
  id: ID!
  name: String!
  rubricCategoryDescription: RubricCategoryDescription
  rubricCategoryDescriptions: [RubricCategoryDescription!]
  slug: String!
  weight: Float!
}

type RubricCategoryDescription {
  description: String!
  id: ID!
  locale: String!
  rubricCategoryId: Int
}

type Sector {
  datasets: [Dataset!]!
  id: ID!
  isDisplayable: Boolean
  locale: String
  name: String!
  organizations: [Organization!]!
  origin: Origin!
  originId: Int
  parentSectorId: ID
  products: [Product!]!
  projects: [Project!]!
  slug: String!
  subSectors: [Sector!]
}

type StarredObject {
  id: ID!
  sourceObjectType: String!
  sourceObjectValue: String!
  starredByEmail: String!
  starredDate: ISO8601Date!
  starredObjectType: String!
  starredObjectValue: String!
}

type SustainableDevelopmentGoal {
  id: ID!
  imageFile: String
  longTitle: String!
  name: String!
  number: Int!
  sdgTargets: [SustainableDevelopmentGoalTarget!]!
  slug: String!
}

type SustainableDevelopmentGoalTarget {
  id: ID!
  imageFile: String
  name: String!
  sdg: SustainableDevelopmentGoal!
  sdgNumber: String!
  sustainableDevelopmentGoal: SustainableDevelopmentGoal!
  targetNumber: String!
  useCases: [UseCase!]
}

type Tag {
  datasets: [Dataset!]!
  id: ID!
  name: String!
  products: [Product!]!
  projects: [Project!]!
  slug: String!
  tagDescription: TagDescription
  tagDescriptions: [TagDescription!]
  useCases: [UseCase!]!
}

type TagDescription {
  description: String!
  id: ID!
  locale: String!
  tagId: Int
}

type TaskTracker {
  id: ID!
  lastReceivedMessage: String!
  lastStartedDate: ISO8601DateTime
  name: String!
  slug: String!
  taskCompleted: Boolean!
  taskTrackerDescription: TaskTrackerDescription
  taskTrackerDescriptions: [TaskTrackerDescription!]
}

type TaskTrackerDescription {
  description: String!
  id: ID!
  locale: String!
  taskTrackerId: Int
}

"""
Autogenerated return type of UpdateBuildingBlockProducts.
"""
type UpdateBuildingBlockProductsPayload {
  buildingBlock: BuildingBlock
  errors: [String!]
}

"""
Autogenerated return type of UpdateBuildingBlockWorkflows.
"""
type UpdateBuildingBlockWorkflowsPayload {
  buildingBlock: BuildingBlock
  errors: [String!]
}

"""
Autogenerated return type of UpdateDatasetCountries.
"""
type UpdateDatasetCountriesPayload {
  dataset: Dataset
  errors: [String!]
}

"""
Autogenerated return type of UpdateDatasetOrganizations.
"""
type UpdateDatasetOrganizationsPayload {
  dataset: Dataset
  errors: [String!]
}

"""
Autogenerated return type of UpdateDatasetSdgs.
"""
type UpdateDatasetSdgsPayload {
  dataset: Dataset
  errors: [String!]
}

"""
Autogenerated return type of UpdateDatasetSectors.
"""
type UpdateDatasetSectorsPayload {
  dataset: Dataset
  errors: [String!]
}

"""
Autogenerated return type of UpdateDatasetTags.
"""
type UpdateDatasetTagsPayload {
  dataset: Dataset
  errors: [String!]
}

"""
Autogenerated return type of UpdateOpportunityBuildingBlocks.
"""
type UpdateOpportunityBuildingBlocksPayload {
  errors: [String!]
  opportunity: Opportunity
}

"""
Autogenerated return type of UpdateOpportunityCountries.
"""
type UpdateOpportunityCountriesPayload {
  errors: [String!]
  opportunity: Opportunity
}

"""
Autogenerated return type of UpdateOpportunityOrganizations.
"""
type UpdateOpportunityOrganizationsPayload {
  errors: [String!]
  opportunity: Opportunity
}

"""
Autogenerated return type of UpdateOpportunitySectors.
"""
type UpdateOpportunitySectorsPayload {
  errors: [String!]
  opportunity: Opportunity
}

"""
Autogenerated return type of UpdateOpportunityTags.
"""
type UpdateOpportunityTagsPayload {
  errors: [String!]
  opportunity: Opportunity
}

"""
Autogenerated return type of UpdateOpportunityUseCases.
"""
type UpdateOpportunityUseCasesPayload {
  errors: [String!]
  opportunity: Opportunity
}

"""
Autogenerated return type of UpdateOrganizationBuildingBlocks.
"""
type UpdateOrganizationBuildingBlocksPayload {
  errors: [String!]
  organization: Organization
}

"""
Autogenerated return type of UpdateOrganizationCertifications.
"""
type UpdateOrganizationCertificationsPayload {
  errors: [String!]
  organization: Organization
}

"""
Autogenerated return type of UpdateOrganizationContacts.
"""
type UpdateOrganizationContactsPayload {
  errors: [String!]
  organization: Organization
}

"""
Autogenerated return type of UpdateOrganizationCountries.
"""
type UpdateOrganizationCountriesPayload {
  errors: [String!]
  organization: Organization
}

"""
Autogenerated return type of UpdateOrganizationOffices.
"""
type UpdateOrganizationOfficesPayload {
  errors: [String!]
  organization: Organization
}

"""
Autogenerated return type of UpdateOrganizationProducts.
"""
type UpdateOrganizationProductsPayload {
  errors: [String!]
  organization: Organization
}

"""
Autogenerated return type of UpdateOrganizationProjects.
"""
type UpdateOrganizationProjectsPayload {
  errors: [String!]
  organization: Organization
}

"""
Autogenerated return type of UpdateOrganizationResources.
"""
type UpdateOrganizationResourcesPayload {
  errors: [String!]
  organization: Organization
}

"""
Autogenerated return type of UpdateOrganizationSectors.
"""
type UpdateOrganizationSectorsPayload {
  errors: [String!]
  organization: Organization
}

"""
Autogenerated return type of UpdateOrganizationSpecialties.
"""
type UpdateOrganizationSpecialtiesPayload {
  errors: [String!]
  organization: Organization
}

"""
Autogenerated return type of UpdatePlayMoves.
"""
type UpdatePlayMovesPayload {
  errors: [String!]
  play: Play
}

"""
Autogenerated return type of UpdatePlaybookPlays.
"""
type UpdatePlaybookPlaysPayload {
  errors: [String!]
  playbook: Playbook
}

"""
Autogenerated return type of UpdateProductBuildingBlocks.
"""
type UpdateProductBuildingBlocksPayload {
  errors: [String!]
  product: Product
}

"""
Autogenerated return type of UpdateProductCountries.
"""
type UpdateProductCountriesPayload {
  errors: [String!]
  product: Product
}

"""
Autogenerated return type of UpdateProductIndicators.
"""
type UpdateProductIndicatorsPayload {
  errors: [String!]
  product: Product
}

"""
Autogenerated return type of UpdateProductOrganizations.
"""
type UpdateProductOrganizationsPayload {
  errors: [String!]
  product: Product
}

"""
Autogenerated return type of UpdateProductProjects.
"""
type UpdateProductProjectsPayload {
  errors: [String!]
  product: Product
}

"""
Autogenerated return type of UpdateProductResources.
"""
type UpdateProductResourcesPayload {
  errors: [String!]
  product: Product
}

"""
Autogenerated return type of UpdateProductSdgs.
"""
type UpdateProductSdgsPayload {
  errors: [String!]
  product: Product
}

"""
Autogenerated return type of UpdateProductSectors.
"""
type UpdateProductSectorsPayload {
  errors: [String!]
  product: Product
}

"""
Autogenerated return type of UpdateProductTags.
"""
type UpdateProductTagsPayload {
  errors: [String!]
  product: Product
}

"""
Autogenerated return type of UpdateProjectCountries.
"""
type UpdateProjectCountriesPayload {
  errors: [String!]
  project: Project
}

"""
Autogenerated return type of UpdateProjectOrganizations.
"""
type UpdateProjectOrganizationsPayload {
  errors: [String!]
  project: Project
}

"""
Autogenerated return type of UpdateProjectProducts.
"""
type UpdateProjectProductsPayload {
  errors: [String!]
  project: Project
}

"""
Autogenerated return type of UpdateProjectSdgs.
"""
type UpdateProjectSdgsPayload {
  errors: [String!]
  project: Project
}

"""
Autogenerated return type of UpdateProjectSectors.
"""
type UpdateProjectSectorsPayload {
  errors: [String!]
  project: Project
}

"""
Autogenerated return type of UpdateProjectTags.
"""
type UpdateProjectTagsPayload {
  errors: [String!]
  project: Project
}

"""
Autogenerated return type of UpdateRegionCountries.
"""
type UpdateRegionCountriesPayload {
  errors: [String!]
  region: Region
}

"""
Autogenerated return type of UpdateResourceCountries.
"""
type UpdateResourceCountriesPayload {
  errors: [String!]
  resource: Resource
}

"""
Autogenerated return type of UpdateResourceProducts.
"""
type UpdateResourceProductsPayload {
  errors: [String!]
  resource: Resource
}

"""
Autogenerated return type of UpdateResourceTags.
"""
type UpdateResourceTagsPayload {
  errors: [String!]
  resource: Resource
}

"""
Autogenerated return type of UpdateRubricCategoryIndicators.
"""
type UpdateRubricCategoryIndicatorsPayload {
  errors: [String!]
  rubricCategory: RubricCategory
}

"""
Autogenerated return type of UpdateUseCaseSdgTargets.
"""
type UpdateUseCaseSdgTargetsPayload {
  errors: [String!]
  useCase: UseCase
}

"""
Autogenerated return type of UpdateUseCaseStepBuildingBlocks.
"""
type UpdateUseCaseStepBuildingBlocksPayload {
  errors: [String!]
  useCaseStep: UseCaseStep
}

"""
Autogenerated return type of UpdateUseCaseStepDatasets.
"""
type UpdateUseCaseStepDatasetsPayload {
  errors: [String!]
  useCaseStep: UseCaseStep
}

"""
Autogenerated return type of UpdateUseCaseStepProducts.
"""
type UpdateUseCaseStepProductsPayload {
  errors: [String!]
  useCaseStep: UseCaseStep
}

"""
Autogenerated return type of UpdateUseCaseStepWorkflows.
"""
type UpdateUseCaseStepWorkflowsPayload {
  errors: [String!]
  useCaseStep: UseCaseStep
}

"""
Autogenerated return type of UpdateUseCaseTags.
"""
type UpdateUseCaseTagsPayload {
  errors: [String!]
  useCase: UseCase
}

"""
Autogenerated return type of UpdateWorkflowBuildingBlocks.
"""
type UpdateWorkflowBuildingBlocksPayload {
  errors: [String!]
  workflow: Workflow
}

scalar Upload

type UseCase {
  buildingBlocks: [BuildingBlock!]
  govStackEntity: Boolean!
  id: ID!
  imageFile: String
  markdownUrl: String
  maturity: String!
  name: String!
  parsedDescription: String
  sanitizedDescription: String!
  sdgTargets: [SustainableDevelopmentGoalTarget!]!
  sector: Sector!
  slug: String!
  tags: JSON
  useCaseDescription: UseCaseDescription!
  useCaseDescriptions: [UseCaseDescription!]
  useCaseHeaders: [UseCaseHeader!]
  useCaseSteps: [UseCaseStep!]
  workflows: [Workflow!]
}

type UseCaseDescription {
  description: String!
  id: ID!
  locale: String!
  useCaseId: Int
}

type UseCaseHeader {
  header: String!
  id: ID!
  locale: String!
  useCaseId: Int
}

type UseCaseStep {
  buildingBlocks: [BuildingBlock!]
  datasets: [Dataset!]
  id: ID!
  name: String!
  parsedDescription: String
  products: [Product!]
  slug: String!
  stepNumber: Int!
  useCase: UseCase!
  useCaseStepDescription: UseCaseStepDescription
  useCaseStepDescriptions: [UseCaseStepDescription!]
  workflows: [Workflow!]!
}

type UseCaseStepDescription {
  description: String!
  id: ID!
  locale: String!
  useCaseId: Int
}

type User {
  allRoles: JSON
  authenticationToken: String!
  confirmationSentAt: ISO8601DateTime
  confirmationToken: String
  confirmed: Boolean
  confirmedAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
  email: String!
  encryptedPassword: String!
  expired: Boolean
  expiredAt: ISO8601DateTime
  id: ID!
  organization: Organization
  products: [Product!]
  receiveBackup: Boolean
  rememberCreatedAt: ISO8601DateTime
  resetPasswordSentAt: ISO8601DateTime
  resetPasswordToken: String
  roles: JSON!
  savedProducts: Int
  savedProjects: Int
  savedUrls: String
  savedUseCases: Int
  unconfirmedEmail: String
  updatedAt: ISO8601DateTime!
  username: String
}

type Wizard {
  digitalPrinciples: [DigitalPrinciple!]!
  playbooks: [Playbook!]!
  resources: [Resource!]!
}

type Workflow {
  buildingBlocks: [BuildingBlock!]!
  id: ID!
  imageFile: String!
  name: String!
  parsedDescription: String
  slug: String!
  useCaseSteps: [UseCaseStep!]!
  useCases: [UseCase!]!
  workflowDescription: WorkflowDescription
  workflowDescriptions: [WorkflowDescription!]!
}

type WorkflowDescription {
  description: String!
  id: ID!
  locale: String!
  useCaseId: Int
}

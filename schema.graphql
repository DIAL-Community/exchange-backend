type BuildingBlock {
  buildingBlockDescription: BuildingBlockDescription
  buildingBlockDescriptions: [BuildingBlockDescription!]
  id: ID!
  imageFile: String
  maturity: String
  name: String!
  products: [Product!]
  slug: String!
  specUrl: String
  workflows: [Workflow!]
}

"""
The connection type for BuildingBlock.
"""
type BuildingBlockConnection {
  """
  A list of edges.
  """
  edges: [BuildingBlockEdge]

  """
  A list of nodes.
  """
  nodes: [BuildingBlock]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

type BuildingBlockDescription {
  buildingBlockId: Int
  description: String!
  id: ID!
  locale: String!
}

"""
An edge in a connection.
"""
type BuildingBlockEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: BuildingBlock
}

type CandidateOrganization {
  description: String
  id: ID!
  name: String
  rejected: Boolean
  slug: String!
  website: String
}

"""
The connection type for CandidateOrganization.
"""
type CandidateOrganizationConnection {
  """
  A list of edges.
  """
  edges: [CandidateOrganizationEdge]

  """
  A list of nodes.
  """
  nodes: [CandidateOrganization]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CandidateOrganizationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CandidateOrganization
}

type CandidateProduct {
  description: String
  id: ID!
  name: String
  rejected: Boolean
  repository: String
  slug: String!
  submitterEmail: String
  website: String
}

"""
The connection type for CandidateProduct.
"""
type CandidateProductConnection {
  """
  A list of edges.
  """
  edges: [CandidateProductEdge]

  """
  A list of nodes.
  """
  nodes: [CandidateProduct]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CandidateProductEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CandidateProduct
}

type CandidateRole {
  description: String
  email: String!
  id: ID!
  organization: Organization
  organizationId: String
  product: Product
  productId: String
  rejected: Boolean
  roles: [String!]
}

"""
The connection type for CandidateRole.
"""
type CandidateRoleConnection {
  """
  A list of edges.
  """
  edges: [CandidateRoleEdge]

  """
  A list of nodes.
  """
  nodes: [CandidateRole]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CandidateRoleEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: CandidateRole
}

type Capability {
  aggregatorId: Int!
  capability: String!
  countryId: Int
  id: ID!
  operatorServiceId: Int!
  service: String!
}

type CategoryIndicator {
  categoryIndicatorDescription: CategoryIndicatorDescription
  categoryIndicatorDescriptions: [CategoryIndicatorDescription!]
  dataSource: String
  id: ID!
  indicatorType: String
  name: String!
  rubricCategory: RubricCategory
  rubricCategoryId: Int
  scriptName: String
  slug: String!
  sourceIndicator: String
  weight: Float!
}

type CategoryIndicatorDescription {
  categoryIndicatorId: Int
  description: String!
  id: ID!
  locale: String!
}

type Comment {
  author: JSON
  avatarUrl: String!
  comId: String!
  commentId: String!
  commentObjectId: Int!
  commentObjectType: String!
  fullName: String!
  id: ID!
  parentCommentId: String
  replies: [Comment!]
  text: String
  userId: String!
}

type Contact {
  email: String
  id: ID!
  name: String!
  slug: String!
  title: String
}

type Count {
  buildingBlockCount: Int!
  mapCount: Int!
  orgCount: Int!
  productCount: Int!
  projectCount: Int!
  sdgCount: Int!
  useCaseCount: Int!
  workflowCount: Int!
}

type Country {
  aliases: [String!]!
  code: String!
  codeLonger: String!
  id: ID!
  latitude: String!
  longitude: String!
  name: String!
  slug: String!
}

"""
The connection type for Country.
"""
type CountryConnection {
  """
  A list of edges.
  """
  edges: [CountryEdge]

  """
  A list of nodes.
  """
  nodes: [Country]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CountryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Country
}

"""
Autogenerated return type of CreateBuildingBlock
"""
type CreateBuildingBlockPayload {
  buildingBlock: BuildingBlock
  errors: [String!]
}

"""
Autogenerated return type of CreateCandidateOrganization
"""
type CreateCandidateOrganizationPayload {
  slug: String
}

"""
Autogenerated return type of CreateCandidateProduct
"""
type CreateCandidateProductPayload {
  slug: String
}

"""
Autogenerated return type of CreateCategoryIndicator
"""
type CreateCategoryIndicatorPayload {
  categoryIndicator: CategoryIndicator
  errors: [String!]
}

"""
Autogenerated return type of CreateComment
"""
type CreateCommentPayload {
  comment: Comment
  errors: [String!]
}

"""
Autogenerated return type of CreateCountry
"""
type CreateCountryPayload {
  country: Country
  errors: [String!]
}

"""
Autogenerated return type of CreateDataset
"""
type CreateDatasetPayload {
  dataset: Dataset
  errors: [String!]
}

"""
Autogenerated return type of CreateMove
"""
type CreateMovePayload {
  errors: [String!]!
  move: Move
}

"""
Autogenerated return type of CreateOrganization
"""
type CreateOrganizationPayload {
  errors: [String!]
  organization: Organization
}

"""
Autogenerated return type of CreatePlay
"""
type CreatePlayPayload {
  errors: [String!]!
  play: Play!
}

"""
Autogenerated return type of CreatePlaybook
"""
type CreatePlaybookPayload {
  errors: [String!]
  playbook: Playbook
}

"""
Autogenerated return type of CreateProduct
"""
type CreateProductPayload {
  errors: [String!]
  product: Product
}

"""
Autogenerated return type of CreateProductRepository
"""
type CreateProductRepositoryPayload {
  slug: String
}

"""
Autogenerated return type of CreateProject
"""
type CreateProjectPayload {
  errors: [String!]
  project: Project
}

"""
Autogenerated return type of CreateResource
"""
type CreateResourcePayload {
  errors: [String!]!
  move: Move
}

"""
Autogenerated return type of CreateRubricCategory
"""
type CreateRubricCategoryPayload {
  errors: [String!]
  rubricCategory: RubricCategory
}

"""
Autogenerated return type of CreateSector
"""
type CreateSectorPayload {
  errors: [String!]
  sector: Sector
}

"""
Autogenerated return type of CreateSpreadsheetData
"""
type CreateSpreadsheetDataPayload {
  dialSpreadsheetData: DialSpreadsheetData
  errors: [String!]!
}

"""
Autogenerated return type of CreateTag
"""
type CreateTagPayload {
  errors: [String!]
  tag: Tag
}

"""
Autogenerated return type of CreateUseCase
"""
type CreateUseCasePayload {
  errors: [String!]
  useCase: UseCase
}

"""
Autogenerated return type of CreateUseCaseStep
"""
type CreateUseCaseStepPayload {
  errors: [String!]
  useCaseStep: UseCaseStep
}

"""
Autogenerated return type of CreateUser
"""
type CreateUserPayload {
  errors: [String!]!
  user: User!
}

"""
Autogenerated return type of CreateWorkflow
"""
type CreateWorkflowPayload {
  errors: [String!]
  workflow: Workflow
}

type Dataset {
  aliases: JSON
  countries: [Country!]
  dataFormat: String
  datasetDescription: DatasetDescription
  datasetDescriptions: [DatasetDescription!]
  datasetType: String!
  geographicCoverage: String
  id: ID!
  imageFile: String!
  languages: String
  license: String
  manualUpdate: Boolean!
  name: String!
  organizations: [Organization!]
  origins: [Origin!]
  sectors: [Sector!]
  slug: String!
  sustainableDevelopmentGoalMapping: String
  sustainableDevelopmentGoals: [SustainableDevelopmentGoal!]
  tags: JSON
  timeRange: String
  visualizationUrl: String
  website: String
}

"""
The connection type for Dataset.
"""
type DatasetConnection {
  """
  A list of edges.
  """
  edges: [DatasetEdge]

  """
  A list of nodes.
  """
  nodes: [Dataset]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

type DatasetDescription {
  datasetId: Int
  description: String!
  id: ID!
  locale: String!
}

"""
An edge in a connection.
"""
type DatasetEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Dataset
}

"""
Autogenerated return type of DeleteCategoryIndicator
"""
type DeleteCategoryIndicatorPayload {
  categoryIndicator: CategoryIndicator
  errors: [String!]
  rubricCategorySlug: String
}

"""
Autogenerated return type of DeleteComment
"""
type DeleteCommentPayload {
  comment: Comment
  errors: [String!]
}

"""
Autogenerated return type of DeleteCountry
"""
type DeleteCountryPayload {
  country: Country
  errors: [String!]
}

"""
Autogenerated return type of DeleteOrganization
"""
type DeleteOrganizationPayload {
  errors: [String!]
  organization: Organization
}

"""
Autogenerated return type of DeletePlaybook
"""
type DeletePlaybookPayload {
  errors: [String!]
  playbook: Playbook
}

"""
Autogenerated return type of DeleteProductRepository
"""
type DeleteProductRepositoryPayload {
  slug: String
}

"""
Autogenerated return type of DeleteRubricCategory
"""
type DeleteRubricCategoryPayload {
  errors: [String!]
  rubricCategory: RubricCategory
}

"""
Autogenerated return type of DeleteSector
"""
type DeleteSectorPayload {
  errors: [String!]
  sector: Sector
}

"""
Autogenerated return type of DeleteSpreadsheetData
"""
type DeleteSpreadsheetDataPayload {
  dialSpreadsheetData: DialSpreadsheetData
  errors: [String!]!
}

"""
Autogenerated return type of DeleteTag
"""
type DeleteTagPayload {
  errors: [String!]
  tag: Tag
}

type DialSpreadsheetData {
  id: ID!
  slug: String!
  spreadsheetData: JSON!
  spreadsheetType: String!
}

type DigitalPrinciple {
  name: String!
  phase: String!
  slug: String!
  url: String!
}

"""
Autogenerated return type of DuplicatePlay
"""
type DuplicatePlayPayload {
  errors: [String!]!
  play: Play!
}

type Endorser {
  id: ID!
  name: String!
  slug: String!
}

type ExportedPdf {
  data: String!
  filename: String!
  locale: String!
}

type Handbook {
  createdAt: ISO8601DateTime!
  handbookDescriptions: [HandbookDescription!]
  handbookPages: [HandbookPage!]
  id: ID!
  imageFile: String
  maturity: String
  name: String!
  pdfUrl: String
  phases: JSON!
  slug: String!
  updatedAt: ISO8601DateTime!
}

type HandbookAnswer {
  action: String!
  answerText: String!
  id: ID!
  locale: String!
}

type HandbookDescription {
  audience: String!
  cover: String
  handbookId: Int
  id: ID!
  locale: String!
  outcomes: String!
  overview: String!
}

type HandbookPage {
  childPages: [HandbookPage!]
  handbookId: Int!
  handbookQuestion: HandbookQuestion
  id: ID!
  mediaUrl: String
  name: String!
  pageContents: [PageContent!]
  pageOrder: Int
  parentPageId: Int
  phase: String
  resources: JSON!
  slug: String!
}

type HandbookQuestion {
  handbookAnswers: [HandbookAnswer!]
  id: ID!
  locale: String!
  questionText: String!
}

type HandbookSearchPage {
  childPages: [HandbookSearchPage!]
  handbookId: Int!
  id: ID!
  name: String!
  parentPageId: Int
  resources: JSON!
  slug: String!
  snippet: String
}

"""
An ISO 8601-encoded date
"""
scalar ISO8601Date

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

"""
Represents untyped JSON
"""
scalar JSON

type Move {
  id: ID!
  moveDescription: MoveDescription
  moveDescriptions: [MoveDescription!]
  name: String!
  order: Int
  play: Play!
  playName: String
  playSlug: String
  resources: JSON!
  slug: String!
}

"""
The connection type for Move.
"""
type MoveConnection {
  """
  A list of edges.
  """
  edges: [MoveEdge]

  """
  A list of nodes.
  """
  nodes: [Move]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

type MoveDescription {
  description: String!
  id: ID!
  locale: String!
  moveId: Int
}

"""
An edge in a connection.
"""
type MoveEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Move
}

type Mutation {
  autoSaveMove(description: String!, moveSlug: String, name: String!, playSlug: String!, resources: JSON = []): CreateMovePayload
  autoSavePlay(description: String!, name: String!, playbookSlug: String, slug: String!, tags: JSON = []): CreatePlayPayload
  autoSavePlaybook(audience: String = "", author: String, cover: Upload, draft: Boolean! = true, name: String!, outcomes: String = "", overview: String!, plays: JSON = [], slug: String!, tags: JSON = []): CreatePlaybookPayload
  createBuildingBlock(description: String!, imageFile: Upload, maturity: String!, name: String!, slug: String!, specUrl: String): CreateBuildingBlockPayload
  createCandidateOrganization(captcha: String!, description: String!, email: String!, name: String!, organizationName: String!, title: String!, website: String!): CreateCandidateOrganizationPayload
  createCandidateProduct(captcha: String!, description: String!, email: String!, name: String!, repository: String!, website: String!): CreateCandidateProductPayload
  createCategoryIndicator(dataSource: String, description: String, indicatorType: String, name: String!, rubricCategorySlug: String, scriptName: String, slug: String!, weight: Float!): CreateCategoryIndicatorPayload
  createComment(commentId: String, commentObjectId: Int!, commentObjectType: String!, parentCommentId: String, text: String!, userId: Int!): CreateCommentPayload
  createCountry(name: String!, slug: String): CreateCountryPayload
  createDataset(aliases: JSON, dataFormat: String, datasetType: String!, description: String!, geographicCoverage: String, languages: String, license: String, name: String!, slug: String!, timeRange: String, visualizationUrl: String, website: String): CreateDatasetPayload
  createMove(description: String!, moveSlug: String, name: String!, playSlug: String!, resources: JSON = []): CreateMovePayload
  createOrganization(aliases: JSON, description: String, endorserLevel: String, imageFile: Upload, isEndorser: Boolean = false, isMni: Boolean = false, name: String!, slug: String!, website: String, whenEndorsed: ISO8601Date): CreateOrganizationPayload
  createPlay(description: String!, name: String!, playbookSlug: String, slug: String!, tags: JSON = []): CreatePlayPayload
  createPlaybook(audience: String = "", author: String, cover: Upload, draft: Boolean! = true, name: String!, outcomes: String = "", overview: String!, plays: JSON = [], slug: String!, tags: JSON = []): CreatePlaybookPayload
  createProduct(aliases: JSON, description: String!, imageFile: Upload, name: String!, slug: String!, website: String): CreateProductPayload
  createProductRepository(absoluteUrl: String!, description: String!, mainRepository: Boolean!, name: String!, slug: String!): CreateProductRepositoryPayload
  createProject(description: String!, endDate: ISO8601Date, name: String!, organizationId: Int, productId: Int, projectUrl: String, slug: String!, startDate: ISO8601Date): CreateProjectPayload
  createResource(description: String!, index: Int!, moveSlug: String, name: String!, playSlug: String!, url: String!): CreateResourcePayload
  createRubricCategory(description: String!, name: String!, slug: String!, weight: Float!): CreateRubricCategoryPayload
  createSector(isDisplayable: Boolean!, locale: String = null, name: String!, originId: Int = null, parentSectorId: Int = null, slug: String!): CreateSectorPayload
  createSpreadsheetData(assoc: String = "", spreadsheetData: JSON = {}, spreadsheetType: String!): CreateSpreadsheetDataPayload
  createTag(description: String, name: String!, slug: String!): CreateTagPayload
  createUseCase(description: String!, imageFile: Upload, maturity: String!, name: String!, sectorSlug: String!, slug: String!): CreateUseCasePayload
  createUseCaseStep(description: String!, name: String!, slug: String!, stepNumber: Int!, useCaseId: Int!): CreateUseCaseStepPayload
  createWorkflow(description: String!, imageFile: Upload, name: String!, slug: String!): CreateWorkflowPayload
  deleteCategoryIndicator(id: ID!): DeleteCategoryIndicatorPayload
  deleteComment(commentId: String!): DeleteCommentPayload
  deleteCountry(id: ID!): DeleteCountryPayload
  deleteOrganization(id: ID!): DeleteOrganizationPayload
  deletePlaybook(id: ID!): DeletePlaybookPayload
  deleteProductRepository(slug: String!): DeleteProductRepositoryPayload
  deleteRubricCategory(id: ID!): DeleteRubricCategoryPayload
  deleteSector(id: ID!): DeleteSectorPayload
  deleteSpreadsheetData(assoc: String = "", spreadsheetData: JSON = {}, spreadsheetType: String!): DeleteSpreadsheetDataPayload
  deleteTag(id: ID!): DeleteTagPayload
  duplicatePlay(playSlug: String!): DuplicatePlayPayload
  updateBuildingBlockProducts(mappingStatus: String!, productsSlugs: [String!]!, slug: String!): UpdateBuildingBlockProductsPayload
  updateBuildingBlockWorkflows(slug: String!, workflowsSlugs: [String!]!): UpdateBuildingBlockWorkflowsPayload
  updateDatasetCountries(countrySlugs: [String!]!, slug: String!): UpdateDatasetCountriesPayload
  updateDatasetOrganizations(organizationSlugs: [String!]!, slug: String!): UpdateDatasetOrganizationsPayload
  updateDatasetSdgs(mappingStatus: String!, sdgSlugs: [String!]!, slug: String!): UpdateDatasetSdgsPayload
  updateDatasetSectors(sectorSlugs: [String!]!, slug: String!): UpdateDatasetSectorsPayload
  updateDatasetTags(slug: String!, tagNames: [String!]!): UpdateDatasetTagsPayload
  updateMoveOrder(distance: Int, moveSlug: String!, operation: String!, playSlug: String!): UpdateMoveOrderPayload
  updateOrganizationContacts(contacts: JSON!, slug: String!): UpdateOrganizationContactsPayload
  updateOrganizationCountry(countriesSlugs: [String!]!, slug: String!): UpdateOrganizationCountryPayload
  updateOrganizationOffices(offices: [JSON!]!, slug: String!): UpdateOrganizationOfficesPayload
  updateOrganizationProducts(productsSlugs: [String!]!, slug: String!): UpdateOrganizationProductsPayload
  updateOrganizationProjects(projectsSlugs: [String!]!, slug: String!): UpdateOrganizationProjectsPayload
  updateOrganizationSectors(sectorsSlugs: [String!]!, slug: String!): UpdateOrganizationSectorsPayload
  updatePlayOrder(distance: Int, operation: String!, playOrder: Int, playSlug: String!, playbookSlug: String!): UpdatePlayOrderPayload
  updateProductBuildingBlocks(buildingBlocksSlugs: [String!]!, mappingStatus: String, slug: String!): UpdateProductBuildingBlocksPayload
  updateProductIndicators(indicatorsData: [JSON!]!, slug: String!): UpdateProductIndicatorsPayload
  updateProductOrganizations(organizationsSlugs: [String!]!, slug: String!): UpdateProductOrganizationsPayload
  updateProductProjects(projectsSlugs: [String!]!, slug: String!): UpdateProductProjectsPayload
  updateProductRepository(absoluteUrl: String!, description: String!, mainRepository: Boolean!, name: String!, slug: String!): UpdateProductRepositoryPayload
  updateProductSdgs(mappingStatus: String!, sdgsSlugs: [String!]!, slug: String!): UpdateProductSdgsPayload
  updateProductSectors(sectorsSlugs: [String!]!, slug: String!): UpdateProductSectorsPayload
  updateProductTags(slug: String!, tags: [String!]!): UpdateProductTagsPayload
  updateProjectCountries(countriesSlugs: [String!]!, slug: String!): UpdateProjectCountriesPayload
  updateProjectOrganizations(organizationsSlugs: [String!]!, slug: String!): UpdateProjectOrganizationsPayload
  updateProjectProducts(productsSlugs: [String!]!, slug: String!): UpdateProjectProductsPayload
  updateProjectSectors(sectorsSlugs: [String!]!, slug: String!): UpdateProjectSectorsPayload
  updateProjectTags(slug: String!, tags: [String!]!): UpdateProjectTagsPayload
  updateRubricCategoryIndicators(categoryIndicatorSlugs: [String!]!, rubricCategorySlug: String!): UpdateRubricCategoryIndicatorsPayload
  updateUseCaseSdgTargets(sdgTargetsIds: [Int!]!, slug: String!): UpdateUseCaseSdgTargetsPayload
  updateUseCaseStepBuildingBlocks(buildingBlocksSlugs: [String!]!, slug: String!): UpdateUseCaseStepBuildingBlocksPayload
  updateUseCaseStepDatasets(datasetsSlugs: [String!]!, slug: String!): UpdateUseCaseStepDatasetsPayload
  updateUseCaseStepProducts(productsSlugs: [String!]!, slug: String!): UpdateUseCaseStepProductsPayload
  updateUseCaseStepWorkflows(slug: String!, workflowsSlugs: [String!]!): UpdateUseCaseStepWorkflowsPayload
  updateUseCaseTags(slug: String!, tags: [String!]!): UpdateUseCaseTagsPayload
  updateUser(confirmed: Boolean, email: String!, organizations: JSON! = [], products: JSON = [], roles: JSON = [], username: String!): CreateUserPayload
  updateWorkflowBuildingBlocks(buildingBlocksSlugs: [String!]!, slug: String!): UpdateWorkflowBuildingBlocksPayload
}

type Office {
  city: String!
  country: Country!
  id: ID!
  latitude: String!
  longitude: String!
  name: String!
  organizationId: Int!
  region: String!
  slug: String!
}

"""
Attributes for pagination
"""
input OffsetAttributeInput {
  offset: Int!
}

type OperatorService {
  countryId: Int
  id: ID!
  name: String!
  service: String!
}

type Organization {
  aliases: JSON
  contacts: [Contact!]
  countries: [Country!]
  endorserLevel: String
  id: ID!
  imageFile: String
  isEndorser: Boolean
  isMni: Boolean
  name: String!
  offices: [Office!]
  organizationDescription: OrganizationDescription
  organizationDescriptions: [OrganizationDescription!]
  products: [Product!]!
  projects: [Project!]!
  sectors: [Sector!]
  slug: String!
  website: String
  whenEndorsed: ISO8601Date
}

"""
The connection type for Organization.
"""
type OrganizationConnection {
  """
  A list of edges.
  """
  edges: [OrganizationEdge]

  """
  A list of nodes.
  """
  nodes: [Organization]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

type OrganizationDescription {
  description: String!
  id: ID!
  locale: String!
  organizationId: Int
}

"""
An edge in a connection.
"""
type OrganizationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Organization
}

type Origin {
  id: ID!
  name: String
  slug: String!
}

"""
The connection type for Origin.
"""
type OriginConnection {
  """
  A list of edges.
  """
  edges: [OriginEdge]

  """
  A list of nodes.
  """
  nodes: [Origin]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type OriginEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Origin
}

type PageContent {
  assets: String
  components: String
  css: String
  editorType: String
  handbookPageId: Int
  html: String!
  id: ID!
  locale: String!
  styles: String
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

type Play {
  buildingBlocks: [BuildingBlock!]
  createdAt: ISO8601DateTime!
  id: ID!
  imageFile: String
  maturity: String
  name: String!
  playDescription: PlayDescription
  playDescriptions: [PlayDescription!]
  playMoves: [Move!]
  products: [Product!]
  slug: String!
  tags: JSON!
  updatedAt: ISO8601DateTime!
}

"""
The connection type for Play.
"""
type PlayConnection {
  """
  A list of edges.
  """
  edges: [PlayEdge]

  """
  A list of nodes.
  """
  nodes: [Play]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

type PlayDescription {
  description: String!
  id: ID!
  locale: String!
  playId: Int
}

"""
An edge in a connection.
"""
type PlayEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Play
}

type Playbook {
  author: String
  createdAt: ISO8601DateTime!
  draft: Boolean!
  id: ID!
  imageFile: String
  maturity: String
  name: String!
  phases: JSON!
  playbookDescription: PlaybookDescription
  playbookDescriptions: [PlaybookDescription!]
  playbookPlays: [PlaybookPlay!]
  plays: [Play!]
  slug: String!
  tags: JSON!
  updatedAt: ISO8601DateTime!
}

"""
The connection type for Playbook.
"""
type PlaybookConnection {
  """
  A list of edges.
  """
  edges: [PlaybookEdge]

  """
  A list of nodes.
  """
  nodes: [Playbook]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

type PlaybookDescription {
  audience: String!
  cover: String
  id: ID!
  locale: String!
  outcomes: String!
  overview: String!
  playbookId: Int
}

"""
An edge in a connection.
"""
type PlaybookEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Playbook
}

type PlaybookPlay {
  id: ID!
  order: Int
  playName: String
  playSlug: String
  playbookSlug: String
}

type Product {
  aliases: JSON
  buildingBlocks: [BuildingBlock!]
  buildingBlocksMappingStatus: String
  commercialProduct: Boolean!
  currentProjects(first: Int): [Project!]
  endorsers: [Endorser!]
  hostingModel: String
  id: ID!
  imageFile: String!
  includes: [Product!]
  interoperatesWith: [Product!]
  isLaunchable: Boolean
  languages: JSON
  mainRepository: ProductRepository
  manualUpdate: Boolean!
  maturityScore: Int
  maturityScores: JSON
  name: String!
  notAssignedCategoryIndicators: [CategoryIndicator!]
  organizations: [Organization!]
  origins: [Origin!]
  owner: String
  pricingDetails: String
  pricingModel: String
  productDescription: ProductDescription
  productDescriptions: [ProductDescription!]
  productIndicators: [ProductIndicator!]
  productType: String!
  projects: [Project!]
  sectors: [Sector!]
  slug: String!
  sustainableDevelopmentGoals: [SustainableDevelopmentGoal!]
  sustainableDevelopmentGoalsMappingStatus: String
  tags: JSON
  website: String
}

"""
The connection type for Product.
"""
type ProductConnection {
  """
  A list of edges.
  """
  edges: [ProductEdge]

  """
  A list of nodes.
  """
  nodes: [Product]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

type ProductDescription {
  description: String!
  id: ID!
  locale: String!
  productId: Int
}

"""
An edge in a connection.
"""
type ProductEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Product
}

type ProductIndicator {
  categoryIndicator: CategoryIndicator!
  categoryIndicatorId: ID!
  id: ID!
  indicatorValue: String!
  productId: ID!
}

type ProductRepository {
  absoluteUrl: String!
  description: String!
  id: ID!
  languageData: JSON
  license: String
  mainRepository: String!
  name: String
  product: Product
  slug: String!
  statisticalData: JSON
}

type Project {
  countries: [Country!]
  endDate: ISO8601Date
  id: ID!
  name: String!
  organizations: [Organization!]
  origin: Origin
  products: [Product!]
  projectDescription: ProjectDescription
  projectDescriptions: [ProjectDescription!]
  projectWebsite: String
  sectors: [Sector!]
  slug: String!
  startDate: ISO8601Date
  tags: JSON
}

"""
The connection type for Project.
"""
type ProjectConnection {
  """
  A list of edges.
  """
  edges: [ProjectEdge]

  """
  A list of nodes.
  """
  nodes: [Project]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

type ProjectDescription {
  description: String!
  id: ID!
  locale: String!
  projectId: Int
}

"""
An edge in a connection.
"""
type ProjectEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Project
}

type Query {
  aggregator(slug: String!): Organization!
  aggregators(search: String = ""): [Organization!]!
  buildingBlock(slug: String!): BuildingBlock!
  buildingBlocks(search: String = ""): [BuildingBlock!]!
  candidateOrganization(slug: String!): CandidateOrganization!
  candidateOrganizations(search: String = ""): [CandidateOrganization!]!
  candidateProduct(slug: String!): CandidateProduct!
  candidateProducts(search: String = ""): [CandidateProduct!]!
  candidateRole(email: String!, organizationId: String!, productId: String!): CandidateRole
  candidateRoles(organizationId: String!, productId: String!): [CandidateRole!]!
  capabilities(aggregatorIds: [Int!] = [], capabilities: [String!] = [], countryIds: [Int!] = [], search: String = "", services: [String!] = []): [Capability!]!
  capabilityOnly(search: String = ""): [Capability!]!
  categoryIndicator(slug: String!): CategoryIndicator
  categoryIndicators(search: String = ""): [CategoryIndicator!]
  comments(commentObjectId: Int!, commentObjectType: String!): [Comment!]!
  countComments(commentObjectId: Int!, commentObjectType: String!): Int!
  countries(search: String = ""): [Country!]!
  country(slug: String!): Country!
  counts: Count!
  dataset(slug: String!): Dataset!
  datasets(search: String = ""): [Dataset!]!
  endorsers(search: String = ""): [Endorser!]!
  exportPageContents(locale: String = "en", pageIds: [Int!]!): ExportedPdf!
  handbook(slug: String!): Handbook!
  handbooks: [Handbook!]!
  me: User!
  move(playSlug: String!, slug: String!): Move!
  moves(search: String = ""): [Move!]!
  operatorServiceOnly(search: String = ""): [OperatorService!]!
  operatorServices(operatorIds: [Int!] = [], operators: [String!] = [], search: String = ""): [OperatorService!]!
  organization(slug: String!): Organization!
  organizations(aggregatorOnly: Boolean = false, search: String = ""): [Organization!]!
  origins(search: String!): [Origin!]!
  ownedProducts: [Product!]!
  pageContents(handbookPageId: ID!, locale: String = "en"): PageContent!
  paginatedAggregators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    countries: [String!] = []

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    offsetAttributes: OffsetAttributeInput!
    search: String = ""
    sectors: [String!] = []
    services: [String!] = []
    subSectors: [String!] = []
  ): OrganizationConnection!
  paginatedDatasets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    countries: [String!] = []
    datasetSortHint: String = "name"

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    offsetAttributes: OffsetAttributeInput!
    sectors: [String!] = []
    tags: [String!] = []
  ): DatasetConnection!
  paginatedPlaybooks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    offsetAttributes: OffsetAttributeInput!
    playbookSortHint: String = "name"
    sector: String = ""
    tags: [String!] = []
  ): PlaybookConnection!
  paginatedProducts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    buildingBlocks: [String!] = []
    commercialProduct: Boolean
    countries: [String!] = []

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    offsetAttributes: OffsetAttributeInput!
    productSortHint: String = "name"
    sectors: [String!] = []
    tags: [String!] = []
    useCases: [String!] = []
  ): ProductConnection!
  paginatedProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    countries: [String!] = []

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    offsetAttributes: OffsetAttributeInput!
    projectSortHint: String = "name"
    sectors: [String!] = []
    tags: [String!] = []
  ): ProjectConnection!
  play(slug: String!): Play!
  playbook(slug: String!): Playbook!
  playbooks(search: String = ""): [Playbook!]!
  plays(search: String = ""): [Play!]!
  product(slug: String!): Product!
  productRepositories(slug: String!): [ProductRepository!]!
  productRepository(slug: String!): ProductRepository!
  products(search: String = ""): [Product!]!
  project(slug: String!): Project!
  projects(search: String = ""): [Project!]!
  rubricCategories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    search: String
  ): RubricCategoryConnection!
  rubricCategory(slug: String!): RubricCategory
  sdg(slug: String!): SustainableDevelopmentGoal!
  sdgTargets(search: String = ""): [SustainableDevelopmentGoalTarget!]!
  sdgs(search: String = ""): [SustainableDevelopmentGoal!]!
  searchAggregators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    countries: [String!] = []

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    search: String = ""
    sectors: [String!] = []
    services: [String!] = []
    subSectors: [String!] = []
  ): OrganizationConnection!
  searchBuildingBlocks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sdgs: [String!] = []
    search: String = ""
    showMature: Boolean = false
    useCases: [String!] = []
    workflows: [String!] = []
  ): BuildingBlockConnection!
  searchCandidateOrganizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    search: String!
  ): CandidateOrganizationConnection!
  searchCandidateProducts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    search: String!
  ): CandidateProductConnection!
  searchCandidateRoles(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    search: String!
  ): CandidateRoleConnection!
  searchCountries(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    search: String = ""
  ): CountryConnection!
  searchDatasets(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    countries: [String!] = []
    datasetSortHint: String = "name"
    datasetTypes: [String!] = []

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    organizations: [String!] = []
    origins: [String!] = []
    sdgs: [String!] = []
    search: String = ""
    sectors: [String!] = []
    subSectors: [String!] = []
    tags: [String!] = []
  ): DatasetConnection!
  searchHandbook(search: String!, slug: String!): [HandbookSearchPage!]!
  searchMoves(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    search: String = ""
  ): MoveConnection!
  searchOrganizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String
    aggregatorOnly: Boolean = false
    aggregators: [String!] = []

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    countries: [String!] = []
    endorserLevel: String = ""
    endorserOnly: Boolean = false

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    mapView: Boolean = false
    search: String = ""
    sectors: [String!] = []
    years: [Int!] = []
  ): OrganizationConnection!
  searchOrigins(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    search: String!
  ): OriginConnection!
  searchPlaybookPlays(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    slug: String!
  ): PlayConnection!
  searchPlaybookTags(search: String = ""): [Tag!]!
  searchPlaybooks(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    products: [String!] = []
    search: String = ""
    tags: [String!] = []
  ): PlaybookConnection!
  searchPlays(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    products: [String!] = []
    search: String = ""
  ): PlayConnection!
  searchProducts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    buildingBlocks: [String!] = []
    countries: [String!] = []
    endorsers: [String!] = []

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    licenseTypes: [String!] = []
    organizations: [String!] = []
    origins: [String!] = []
    productDeployable: Boolean = false
    productSortHint: String = "name"
    productTypes: [String!] = []
    sdgs: [String!] = []
    search: String = ""
    sectors: [String!] = []
    subSectors: [String!] = []
    tags: [String!] = []
    useCases: [String!] = []
    withMaturity: Boolean = false
    workflows: [String!] = []
  ): ProductConnection!
  searchProjects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    countries: [String!] = []

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    mapView: Boolean = false
    organizations: [String!] = []
    origins: [String!] = []
    products: [String!] = []
    projectSortHint: String = "name"
    sdgs: [String!] = []
    search: String = ""
    sectors: [String!] = []
    tags: [String!] = []
  ): ProjectConnection!
  searchSdgs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sdgs: [String!] = []
    search: String = ""
  ): SustainableDevelopmentGoalConnection!
  searchSectors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int
    isDisplayable: Boolean = null

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    locale: String = null
    parentSectorId: Int = null
    search: String = ""
  ): SectorConnection!
  searchTags(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    search: String = ""
  ): TagConnection!
  searchUseCases(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sdgs: [String!] = []
    search: String = ""
    showBeta: Boolean = false
  ): UseCaseConnection!
  searchUsers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    search: String = ""
  ): UserConnection!
  searchWorkflows(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the last _n_ elements from the list.
    """
    last: Int
    sdgs: [String!] = []
    search: String = ""
    useCases: [String!] = []
  ): WorkflowConnection!
  sector(slug: String!): Sector!
  sectors(locale: String = "en", search: String = ""): [Sector!]!
  sectorsWithSubs(locale: String = "en"): [Sector!]!
  spreadsheetDataset: [DialSpreadsheetData!]!
  spreadsheetProduct: [DialSpreadsheetData!]!
  tag(slug: String!): Tag!
  tags(search: String = ""): [Tag!]!
  useCase(slug: String!): UseCase!
  useCaseStep(slug: String!): UseCaseStep!
  useCaseSteps(slug: String!): [UseCaseStep!]!
  useCases(mature: Boolean = false, search: String = ""): [UseCase!]!
  useCasesForSector(sectorSlug: String!): [UseCase!]!
  useCasesSteps(search: String = ""): [UseCaseStep!]!
  user(userId: String!): User!
  users(search: String = ""): [User!]!
  wizard(buildingBlocks: [String!], sdg: String, sector: String, useCase: String): Wizard!
  workflow(slug: String!): Workflow!
  workflows(search: String = ""): [Workflow!]!
}

type Resources {
  description: String
  imageUrl: String!
  link: String!
  name: String!
  phase: String!
}

type RubricCategory {
  categoryIndicators: [CategoryIndicator!]
  id: ID!
  name: String!
  rubricCategoryDescription: RubricCategoryDescription
  rubricCategoryDescriptions: [RubricCategoryDescription!]
  slug: String!
  weight: Float!
}

"""
The connection type for RubricCategory.
"""
type RubricCategoryConnection {
  """
  A list of edges.
  """
  edges: [RubricCategoryEdge]

  """
  A list of nodes.
  """
  nodes: [RubricCategory]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

type RubricCategoryDescription {
  description: String!
  id: ID!
  locale: String!
  rubricCategoryId: Int
}

"""
An edge in a connection.
"""
type RubricCategoryEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: RubricCategory
}

type Sector {
  id: ID!
  isDisplayable: Boolean
  locale: String
  name: String!
  originId: Int
  parentSectorId: ID
  slug: String!
  subSectors: [Sector!]
}

"""
The connection type for Sector.
"""
type SectorConnection {
  """
  A list of edges.
  """
  edges: [SectorEdge]

  """
  A list of nodes.
  """
  nodes: [Sector]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SectorEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Sector
}

type SustainableDevelopmentGoal {
  id: ID!
  imageFile: String
  longTitle: String!
  name: String!
  number: Int!
  sdgTargets: [SustainableDevelopmentGoalTarget!]!
  slug: String!
}

"""
The connection type for SustainableDevelopmentGoal.
"""
type SustainableDevelopmentGoalConnection {
  """
  A list of edges.
  """
  edges: [SustainableDevelopmentGoalEdge]

  """
  A list of nodes.
  """
  nodes: [SustainableDevelopmentGoal]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SustainableDevelopmentGoalEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SustainableDevelopmentGoal
}

type SustainableDevelopmentGoalTarget {
  id: ID!
  imageFile: String
  name: String!
  sdgNumber: String!
  sustainableDevelopmentGoal: SustainableDevelopmentGoal!
  targetNumber: String!
  useCases: [UseCase!]
}

type Tag {
  id: ID!
  name: String!
  slug: String!
  tagDescription: TagDescription
  tagDescriptions: [TagDescription!]
}

"""
The connection type for Tag.
"""
type TagConnection {
  """
  A list of edges.
  """
  edges: [TagEdge]

  """
  A list of nodes.
  """
  nodes: [Tag]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

type TagDescription {
  description: String!
  id: ID!
  locale: String!
  tagId: Int
}

"""
An edge in a connection.
"""
type TagEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Tag
}

"""
Autogenerated return type of UpdateBuildingBlockProducts
"""
type UpdateBuildingBlockProductsPayload {
  buildingBlock: BuildingBlock
  errors: [String!]
}

"""
Autogenerated return type of UpdateBuildingBlockWorkflows
"""
type UpdateBuildingBlockWorkflowsPayload {
  buildingBlock: BuildingBlock
  errors: [String!]
}

"""
Autogenerated return type of UpdateDatasetCountries
"""
type UpdateDatasetCountriesPayload {
  dataset: Dataset
  errors: [String!]
}

"""
Autogenerated return type of UpdateDatasetOrganizations
"""
type UpdateDatasetOrganizationsPayload {
  dataset: Dataset
  errors: [String!]
}

"""
Autogenerated return type of UpdateDatasetSdgs
"""
type UpdateDatasetSdgsPayload {
  dataset: Dataset
  errors: [String!]
}

"""
Autogenerated return type of UpdateDatasetSectors
"""
type UpdateDatasetSectorsPayload {
  dataset: Dataset
  errors: [String!]
}

"""
Autogenerated return type of UpdateDatasetTags
"""
type UpdateDatasetTagsPayload {
  dataset: Dataset
  errors: [String!]
}

"""
Autogenerated return type of UpdateMoveOrder
"""
type UpdateMoveOrderPayload {
  errors: [String!]!
  move: Move
}

"""
Autogenerated return type of UpdateOrganizationContacts
"""
type UpdateOrganizationContactsPayload {
  errors: [String!]
  organization: Organization
}

"""
Autogenerated return type of UpdateOrganizationCountry
"""
type UpdateOrganizationCountryPayload {
  errors: [String!]
  organization: Organization
}

"""
Autogenerated return type of UpdateOrganizationOffices
"""
type UpdateOrganizationOfficesPayload {
  errors: [String!]
  organization: Organization
}

"""
Autogenerated return type of UpdateOrganizationProducts
"""
type UpdateOrganizationProductsPayload {
  errors: [String!]
  organization: Organization
}

"""
Autogenerated return type of UpdateOrganizationProjects
"""
type UpdateOrganizationProjectsPayload {
  errors: [String!]
  organization: Organization
}

"""
Autogenerated return type of UpdateOrganizationSectors
"""
type UpdateOrganizationSectorsPayload {
  errors: [String!]
  organization: Organization
}

"""
Autogenerated return type of UpdatePlayOrder
"""
type UpdatePlayOrderPayload {
  errors: [String!]!
  play: Play!
}

"""
Autogenerated return type of UpdateProductBuildingBlocks
"""
type UpdateProductBuildingBlocksPayload {
  errors: [String!]
  product: Product
}

"""
Autogenerated return type of UpdateProductIndicators
"""
type UpdateProductIndicatorsPayload {
  errors: [String!]
  product: Product
}

"""
Autogenerated return type of UpdateProductOrganizations
"""
type UpdateProductOrganizationsPayload {
  errors: [String!]
  product: Product
}

"""
Autogenerated return type of UpdateProductProjects
"""
type UpdateProductProjectsPayload {
  errors: [String!]
  product: Product
}

"""
Autogenerated return type of UpdateProductRepository
"""
type UpdateProductRepositoryPayload {
  slug: String
}

"""
Autogenerated return type of UpdateProductSdgs
"""
type UpdateProductSdgsPayload {
  errors: [String!]
  product: Product
}

"""
Autogenerated return type of UpdateProductSectors
"""
type UpdateProductSectorsPayload {
  errors: [String!]
  product: Product
}

"""
Autogenerated return type of UpdateProductTags
"""
type UpdateProductTagsPayload {
  errors: [String!]
  product: Product
}

"""
Autogenerated return type of UpdateProjectCountries
"""
type UpdateProjectCountriesPayload {
  errors: [String!]
  project: Project
}

"""
Autogenerated return type of UpdateProjectOrganizations
"""
type UpdateProjectOrganizationsPayload {
  errors: [String!]
  project: Project
}

"""
Autogenerated return type of UpdateProjectProducts
"""
type UpdateProjectProductsPayload {
  errors: [String!]
  project: Project
}

"""
Autogenerated return type of UpdateProjectSectors
"""
type UpdateProjectSectorsPayload {
  errors: [String!]
  project: Project
}

"""
Autogenerated return type of UpdateProjectTags
"""
type UpdateProjectTagsPayload {
  errors: [String!]
  project: Project
}

"""
Autogenerated return type of UpdateRubricCategoryIndicators
"""
type UpdateRubricCategoryIndicatorsPayload {
  errors: [String!]
  rubricCategory: RubricCategory
}

"""
Autogenerated return type of UpdateUseCaseSdgTargets
"""
type UpdateUseCaseSdgTargetsPayload {
  errors: [String!]
  useCase: UseCase
}

"""
Autogenerated return type of UpdateUseCaseStepBuildingBlocks
"""
type UpdateUseCaseStepBuildingBlocksPayload {
  errors: [String!]
  useCaseStep: UseCaseStep
}

"""
Autogenerated return type of UpdateUseCaseStepDatasets
"""
type UpdateUseCaseStepDatasetsPayload {
  errors: [String!]
  useCaseStep: UseCaseStep
}

"""
Autogenerated return type of UpdateUseCaseStepProducts
"""
type UpdateUseCaseStepProductsPayload {
  errors: [String!]
  useCaseStep: UseCaseStep
}

"""
Autogenerated return type of UpdateUseCaseStepWorkflows
"""
type UpdateUseCaseStepWorkflowsPayload {
  errors: [String!]
  useCaseStep: UseCaseStep
}

"""
Autogenerated return type of UpdateUseCaseTags
"""
type UpdateUseCaseTagsPayload {
  errors: [String!]
  useCase: UseCase
}

"""
Autogenerated return type of UpdateWorkflowBuildingBlocks
"""
type UpdateWorkflowBuildingBlocksPayload {
  errors: [String!]
  workflow: Workflow
}

scalar Upload

type UseCase {
  buildingBlocks: [BuildingBlock!]
  id: ID!
  imageFile: String
  maturity: String!
  name: String!
  sdgTargets: [SustainableDevelopmentGoalTarget!]!
  sector: Sector!
  slug: String!
  tags: JSON
  useCaseDescription: UseCaseDescription!
  useCaseDescriptions: [UseCaseDescription!]
  useCaseHeaders: [UseCaseHeader!]
  useCaseSteps: [UseCaseStep!]
  workflows: [Workflow!]
}

"""
The connection type for UseCase.
"""
type UseCaseConnection {
  """
  A list of edges.
  """
  edges: [UseCaseEdge]

  """
  A list of nodes.
  """
  nodes: [UseCase]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

type UseCaseDescription {
  description: String!
  id: ID!
  locale: String!
  useCaseId: Int
}

"""
An edge in a connection.
"""
type UseCaseEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: UseCase
}

type UseCaseHeader {
  header: String!
  id: ID!
  locale: String!
  useCaseId: Int
}

type UseCaseStep {
  buildingBlocks: [BuildingBlock!]
  datasets: [Dataset!]
  id: ID!
  name: String!
  products: [Product!]
  slug: String!
  stepNumber: Int!
  useCase: UseCase!
  useCaseStepDescription: UseCaseStepDescription
  useCaseStepDescriptions: [UseCaseStepDescription!]
  workflows: [Workflow!]!
}

type UseCaseStepDescription {
  description: String!
  id: ID!
  locale: String!
  useCaseId: Int
}

type User {
  allRoles: JSON
  confirmationSentAt: ISO8601DateTime
  confirmationToken: String
  confirmed: Boolean
  confirmedAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
  email: String!
  encryptedPassword: String!
  expired: Boolean
  expiredAt: ISO8601DateTime
  id: ID!
  organization: Organization
  products: [Product!]
  receiveBackup: Boolean
  rememberCreatedAt: ISO8601DateTime
  resetPasswordSentAt: ISO8601DateTime
  resetPasswordToken: String
  roles: JSON!
  savedProducts: Int
  savedProjects: Int
  savedUrls: String
  savedUseCases: Int
  unconfirmedEmail: String
  updatedAt: ISO8601DateTime!
  username: String
}

"""
The connection type for User.
"""
type UserConnection {
  """
  A list of edges.
  """
  edges: [UserEdge]

  """
  A list of nodes.
  """
  nodes: [User]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: User
}

type Wizard {
  buildingBlocks: [BuildingBlock!]
  digitalPrinciples: [DigitalPrinciple!]
  organizations: [Organization!]
  playbooks: [Playbook!]
  products: [Product!]
  projects: [Project!]
  resources: [Resources!]
  useCases: [UseCase!]
}

type Workflow {
  buildingBlocks: [BuildingBlock!]
  id: ID!
  imageFile: String!
  name: String!
  slug: String!
  useCaseSteps: [UseCaseStep!]
  workflowDescription: WorkflowDescription
  workflowDescriptions: [WorkflowDescription!]
}

"""
The connection type for Workflow.
"""
type WorkflowConnection {
  """
  A list of edges.
  """
  edges: [WorkflowEdge]

  """
  A list of nodes.
  """
  nodes: [Workflow]

  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

type WorkflowDescription {
  description: String!
  id: ID!
  locale: String!
  useCaseId: Int
}

"""
An edge in a connection.
"""
type WorkflowEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Workflow
}
